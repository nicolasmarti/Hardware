theory ALU

use import int.Int
use import bool.Bool
use import bv.Pow2int

use import builtins.Wire
use import builtins.WireVector

use import builtins.NOT16
use import builtins.NOT
use import builtins.MUX16
use import builtins.MUX
use import builtins.AND16
use import builtins.ADD16
use import builtins.Inc16
use import builtins.OR16WAY

(**)

function x: WireVector.t
function y: WireVector.t
function zx: Wire.t
function nx: Wire.t
function zy: Wire.t
function ny: Wire.t
function f: Wire.t
function no: Wire.t

function out0: WireVector.t
function zr: Wire.t
function ng: Wire.t
function overflow: Wire.t

(**)

function x0: WireVector.t
clone builtins.MUX16 as MUX0 with function in0 = x, function in1 = false_v, function sel = zx, function out0 = x0

function not_x0: WireVector.t
clone builtins.NOT16 as NOT0 with function in0 = x0, function out0 = not_x0

function x1: WireVector.t
clone builtins.MUX16 as MUX1 with function in0 = x0, function in1 = not_x0, function sel = nx, function out0 = x0


function y0: WireVector.t
clone builtins.MUX16 as MUX2 with function in0 = y, function in1 = false_v, function sel = zy, function out0 = y0

function not_y0: WireVector.t
clone builtins.NOT16 as NOT1 with function in0 = y0, function out0 = not_y0

function y1: WireVector.t
clone builtins.MUX16 as MUX3 with function in0 = y0, function in1 = not_y0, function sel = ny, function out0 = y1

function x_plus_y: WireVector.t
function x_plus_y_carry: Wire.t
clone builtins.ADD16 as ADD0 with function in0 = x1, function in1 = y1, function out0 = x_plus_y, function carry = x_plus_y_carry

function x_and_y: WireVector.t
clone builtins.AND16 as AND0 with function in0 = x1, function in1 = y1, function out0 = x_and_y

function x_op_y:  WireVector.t
clone builtins.MUX16 as MUX4 with function in0 = x_plus_y, function in1 = x_and_y, function sel = f, function out0 = x_op_y

clone builtins.MUX as MUX5 with function in0 = x_plus_y_carry, function in1 = false_t, function sel = f, function out0 = overflow


function neg_x_op_y:  WireVector.t
clone builtins.NOT16 as NOT2 with function in0 = x_op_y, function out0 = neg_x_op_y

clone builtins.MUX16 as MUX6 with function in0 = x_op_y, function in1 = neg_x_op_y, function sel = no, function out0 = out0

function or_out0: Wire.t
clone builtins.OR16WAY as OR16WAY0 with function in0 = out0, function out0 = or_out0

clone builtins.NOT as NOT3 with function in0 = or_out0, function out0 = zr

axiom ng_value: ng = out0[15 ..] 

(**)

lemma sem: forall t: int. (* ?????? *) true


end