
theory FullAdder

(**)

use import int.Int
use import bool.Bool
use import bv.Pow2int

use import builtins.Wire
use import builtins.WireVector

use builtins.XOR
use builtins.AND
use builtins.OR

(**)

function in0: Wire.t
function in1: Wire.t
function in2: Wire.t

function sum: Wire.t
function carry: Wire.t


(**)

function xor01: Wire.t

clone builtins.XOR as XOR1 with function in0 = in0, function in1 = in1, function out0 = xor01

clone builtins.XOR as XOR2 with function in0 = xor01, function in1 = in2, function out0 = sum

function aux0: Wire.t
function aux1: Wire.t
function aux2: Wire.t

clone builtins.AND as AND1 with function in0 = in0, function in1 = in1, function out0 = aux0

clone builtins.AND as AND2 with function in0 = in0, function in1 = in2, function out0 = aux1

clone builtins.AND as AND3 with function in0 = in1, function in1 = in2, function out0 = aux2

function aux3: Wire.t

clone builtins.OR as OR1 with function in0 = aux0, function in1 = aux1, function out0 = aux3

clone builtins.OR as OR2 with function in0 = aux3, function in1 = aux2, function out0 = carry


(**)

constant weight: int
axiom weight_pos: weight >= 0

function in0_value (t: int) : int = if in0[t] then pow2 weight else 0
function in1_value (t: int) : int = if in1[t] then pow2 weight else 0
function in2_value (t: int) : int = if in2[t] then pow2 weight else 0

function sum_value (t: int) : int = if sum[t] then pow2 weight else 0
function carry_value (t: int) : int = if carry[t] then pow2 (weight+1) else 0

(* need this lemma, so that z3 & cvc4 could prove the next one
   this lemma is only proved by alt-ergo
*)
lemma l: pow2 (weight+1) = 2 * pow2 weight

lemma sem:
	forall t: int.
	sum_value t + carry_value t = in0_value t + in1_value t + in2_value t

end
