theory DMUX4WAY

use import int.Int
use import bool.Bool

use import builtins.Wire
use import builtins.WireVector
use builtins.DMUX

function in0: Wire.t
function sel: WireVector.t
function out0: Wire.t
function out1: Wire.t
function out2: Wire.t
function out3: Wire.t

function sel_0: Wire.t = sel[0 ..]
function sel_1: Wire.t = sel[1 ..]

(**)
function aux0: Wire.t
function aux1: Wire.t

clone builtins.DMUX as DMUX1 with function in0 = in0, function sel = sel_0, function out0 = aux0, function out1 = aux1 

clone builtins.DMUX as DMUX2 with function in0 = aux0, function sel = sel_1, function out0 = out0, function out1 = out1

clone builtins.DMUX as DMUX3 with function in0 = aux1, function sel = sel_1, function out0 = out2, function out1 = out3

(**)

lemma sem0:
	forall t: int.
	out0[t] = if not sel[0 ..][t] /\ not sel[1 ..][t] then
		     in0[t]
		     else false

lemma sem1:
	forall t: int.
	out1[t] = if not sel[0 ..][t] /\ sel[1 ..][t] then
		     in0[t]
		     else false

lemma sem2:
	forall t: int.
	out2[t] = if sel[0 ..][t] /\ not sel[1 ..][t] then
		     in0[t]
		     else false

lemma sem3:
	forall t: int.
	out3[t] = if sel[0 ..][t] /\ sel[1 ..][t] then
		     in0[t]
		     else false

end
