theory OR8WAY

use import int.Int
use import bool.Bool

use import builtins.Wire
use import builtins.WireVector
use builtins.OR

function in0: WireVector.t
function out0: Wire.t

function in0_0: Wire.t = in0[0 ..]
function in0_1: Wire.t = in0[1 ..]
function in0_2: Wire.t = in0[2 ..]
function in0_3: Wire.t = in0[3 ..]
function in0_4: Wire.t = in0[4 ..]
function in0_5: Wire.t = in0[5 ..]
function in0_6: Wire.t = in0[6 ..]
function in0_7: Wire.t = in0[7 ..]
function in0_8: Wire.t = in0[8 ..]


function aux01: Wire.t
clone builtins.OR as OR01 with function in0 = in0_0, function in1 = in0_1, function out0 = aux01

function aux23: Wire.t
clone builtins.OR as OR23 with function in0 = in0_2, function in1 = in0_3, function out0 = aux23

function aux45: Wire.t
clone builtins.OR as OR45 with function in0 = in0_4, function in1 = in0_5, function out0 = aux45

function aux67: Wire.t
clone builtins.OR as OR67 with function in0 = in0_6, function in1 = in0_7, function out0 = aux67

function aux0123: Wire.t
clone builtins.OR as OR0123 with function in0 = aux01, function in1 = aux23, function out0 = aux0123

function aux4567: Wire.t
clone builtins.OR as OR4567 with function in0 = aux45, function in1 = aux67, function out0 = aux4567

clone builtins.OR as OR01234567 with function in0 = aux0123, function in1 = aux4567, function out0 = out0

lemma or8way_sem:
	forall t: int.
	out0[t] = orb in0[0 ..][t] 
		      (orb in0[1 ..][t] 
		      	   (orb in0[2 ..][t] 
		  	   	(orb in0[3 ..][t] 
		  		     (orb in0[4 ..][t] 
		  		     	  (orb in0[5 ..][t] 
		  			       (orb in0[6 ..][t] in0[7 ..][t]
					       )
					  )
				     )
				)
		           )
		      )
end
