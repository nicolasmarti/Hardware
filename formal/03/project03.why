(***************)

theory DFF

use prelude.Map
use int.Int
use bool.Bool
use prelude.Wire

function _in: wire
function out: wire

axiom correctness: forall t: int. out[t+1] = _in[t]

end

(***************)

theory Bit

use prelude.Map
use int.Int
use bool.Bool
use prelude.Wire

function _in: wire
function load: wire
function out: wire

function state: map int bool

axiom correctness_out :
      forall t: int. out[t+1] = state[t]
axiom correctness_state_noload:
      forall t: int. load[t+1] = false -> state[t+1] = state[t]
axiom correctness_state_load:
      forall t: int. load[t+1] = true -> state[t+1] = _in[t+1]

end

(***************)

theory Register

use prelude.Map
use int.Int
use bool.Bool
use prelude.Bin16
use prelude.Wire

function _in: wire16
function load: wire
function out: wire16

function state: map int bin16

axiom correctness_out :
      forall t: int. out[t+1] = state[t]
axiom correctness_state_noload:
      forall t: int. load[t+1] = false -> state[t+1] = state[t]
axiom correctness_state_load:
      forall t: int. load[t+1] = true -> state[t+1] = _in[t+1]
      

end


(***************)

theory RAM8

use prelude.Map
use int.Int
use bool.Bool
use prelude.Bin16
use prelude.Bin3
use prelude.Wire

function _in: wire16
function load: wire
function address: wire3
function out: wire16

function state: map int (map bin3 bin16)

axiom correctness_out :
      forall t: int. out[t+1] = state[t][ address[t+1] ]
axiom correctness_state_noload:
      forall t: int. load[t+1] = false -> state[t+1] = state[t]
axiom correctness_state_load:
      forall t: int. load[t+1] = true -> state[t+1] = state[t][ address[t+1] <- _in[t+1] ]

end

(***************)

theory RAM64

use prelude.Map
use int.Int
use bool.Bool
use prelude.Bin16
use prelude.Bin6

use prelude.Wire

function _in: wire16
function load: wire
function address: wire6
function out: wire16

function state: map int (map bin6 bin16)


axiom correctness_out :
      forall t: int. out[t+1] = state[t][ address[t+1] ]
axiom correctness_state_noload:
      forall t: int. load[t+1] = false -> state[t+1] = state[t]
axiom correctness_state_load:
      forall t: int. load[t+1] = true -> state[t+1] = state[t][ address[t+1] <- _in[t+1] ]

end

