(***************)

theory DFF

use prelude.Map
use int.Int
use bool.Bool
use prelude.Wire

function _in: wire
function out: wire

axiom correctness: forall t: int. out[t+1] = _in[t]

end

(***************)

theory Bit

use prelude.Map
use int.Int
use bool.Bool
use prelude.Wire

function _in: wire
function load: wire
function out: wire

function state: map int bool

axiom correctness:
      forall t: int.
             out[t+1] = state[t] /\
             state[t+1] = if load[t+1] then _in[t+1] else state[t]

end

(***************)

theory Register

use prelude.Map
use int.Int
use bool.Bool
use prelude.Bin16
use prelude.Wire

function _in: wire16
function load: wire
function out: wire16

function state: map int bin16

axiom correctness:
      forall t: int.
             out[t+1] = state[t] /\
             state[t+1] = if load[t+1] then _in[t+1] else state[t]

end

(***************)

theory RAM8

use prelude.Map
use int.Int
use bool.Bool
use prelude.Bin16
use prelude.Bin3
use prelude.Wire

function _in: wire16
function load: wire
function address: wire3
function out: wire16

function state: map int (map wire3 bin16)

axiom correctness:
      forall t: int.
             out[t+1] = state[t] /\
             state[t+1] = if load[t+1] then state[t][ address <- _in[t] ] else state[t]

end

