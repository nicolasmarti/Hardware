
theory NOT

(**)

use import int.Int
use import bool.Bool

use import builtins.Wire
use import builtins.WireVector

use builtins.NAND

(**)

constant delay: int = NAND.delay

(**)

function in0: Wire.t
function out0: Wire.t

predicate output_semantics (t: int) (delay': int) =
	out0[t] = notb in0[t-delay']

(**)

clone builtins.NAND as NAND1 with function in0 = in0, function in1 = in0, function out0 = out0


(**)

lemma stable:
	forall t: int.
	forall delay'. delay' >= delay ->
	Wire.stability t delay' in0 ->
	Wire.stability t (delay' - delay) out0

lemma correct:
	forall t: int.
	forall delay'. delay' >= delay ->
	Wire.stability t delay' in0 ->
	output_semantics t delay'

end
