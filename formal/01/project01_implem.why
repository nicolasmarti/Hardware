(******************************)

theory Not

use prelude.Map
use prelude.Wire
use bool.Bool

function a: wire
function out: wire

clone project01.Nand as Nand0 with function a = a, function b = a, function out = out, axiom .

clone project01.Not as Specif with function a = a, function out = out

end

(******************************)

theory And

use prelude.Map
use prelude.Wire
use bool.Bool

function a: wire
function b: wire
function out: wire

clone project01.Nand as Nand0 with function a = a, function b = b, axiom .
clone project01.Not as Not0 with function a = Nand0.out, function out = out, axiom .

clone project01.And as Specif with function a = a, function b = b, function out = out

end

(******************************)

theory Or

use prelude.Map
use prelude.Wire
use bool.Bool

function a: wire
function b: wire
function out: wire

clone project01.Not as Nota with function a = a, axiom .
clone project01.Not as Notb with function a = b, axiom .
clone project01.Nand as Nand0 with function a = Nota.out, function b = Notb.out, function out = out, axiom .

clone project01.Or as Specif with function a = a, function b = b, function out = out

end

(******************************)

theory Xor

use prelude.Map
use prelude.Wire
use bool.Bool

function a: wire
function b: wire
function out: wire

clone project01.Nand as Nand0 with function a = a, function b = b, axiom .
clone project01.Or as Or0 with function a = a, function b = b, axiom .
clone project01.And as And0 with function a = Nand0.out, function b = Or0.out, function out = out, axiom .

clone project01.Xor as Specif with function a = a, function b = b, function out = out

end

(******************************)

theory Mux

use prelude.Map
use prelude.Wire
use bool.Bool

function a: wire
function b: wire
function sel: wire
function out: wire

clone project01.And as And0 with function a = b, function b = sel, axiom .
clone project01.Not as Not0 with function a = sel, axiom .
clone project01.And as And1 with function a = a, function b = Not0.out, axiom .
clone project01.Or as Or0 with function a = And0.out, function b = And1.out, function out = out, axiom .

clone project01.Mux as Specif
with
function a = a,
function b = b,
function sel = sel,
function out = out

end

(******************************)

theory DMux

use prelude.Map
use prelude.Wire
use bool.Bool

function in0: wire
function sel: wire
function outa: wire
function outb: wire

clone project01.Not as Not0 with function a = sel, axiom .
clone project01.And as And0 with function a = Not0.out, function b = in0, function out = outa, axiom .
clone project01.And as And1 with function a = sel, function b = in0, function out = outb, axiom .


clone project01.DMux as Specif
with
function in0 = in0,
function sel = sel,
function outa = outa,
function outb = outb

end

(******************************)

theory Not16

use prelude.Map
use prelude.Wire
use bool.Bool
use prelude.Bin16

function a: wire16
function out: wire16

clone prelude.Wire16 as A with function w = a, axiom .
clone prelude.Wire16 as Out with function w = out, axiom .

clone project01.Not as Not0 with function a = A.w0, function out = Out.w0, axiom .
clone project01.Not as Not1 with function a = A.w1, function out = Out.w1, axiom .
clone project01.Not as Not2 with function a = A.w2, function out = Out.w2, axiom .
clone project01.Not as Not3 with function a = A.w3, function out = Out.w3, axiom .
clone project01.Not as Not4 with function a = A.w4, function out = Out.w4, axiom .
clone project01.Not as Not5 with function a = A.w5, function out = Out.w5, axiom .
clone project01.Not as Not6 with function a = A.w6, function out = Out.w6, axiom .
clone project01.Not as Not7 with function a = A.w7, function out = Out.w7, axiom .
clone project01.Not as Not8 with function a = A.w8, function out = Out.w8, axiom .
clone project01.Not as Not9 with function a = A.w9, function out = Out.w9, axiom .
clone project01.Not as Not10 with function a = A.w10, function out = Out.w10, axiom .
clone project01.Not as Not11 with function a = A.w11, function out = Out.w11, axiom .
clone project01.Not as Not12 with function a = A.w12, function out = Out.w12, axiom .
clone project01.Not as Not13 with function a = A.w13, function out = Out.w13, axiom .
clone project01.Not as Not14 with function a = A.w14, function out = Out.w14, axiom .
clone project01.Not as Not15 with function a = A.w15, function out = Out.w15, axiom .

clone project01.Not16 as Specif
with
function a = a,
function out = out

end

(******************************)

theory And16

use prelude.Map
use prelude.Wire
use bool.Bool
use prelude.Bin16

function a: wire16
function b: wire16
function out: wire16

clone prelude.Wire16 as A with function w = a, axiom .
clone prelude.Wire16 as B with function w = b, axiom .
clone prelude.Wire16 as Out with function w = out, axiom .

clone project01.And as Not0 with function a = A.w0, function b = B.w0, function out = Out.w0, axiom .
clone project01.And as Not1 with function a = A.w1, function b = B.w1, function out = Out.w1, axiom .
clone project01.And as Not2 with function a = A.w2, function b = B.w2, function out = Out.w2, axiom .
clone project01.And as Not3 with function a = A.w3, function b = B.w3, function out = Out.w3, axiom .
clone project01.And as Not4 with function a = A.w4, function b = B.w4, function out = Out.w4, axiom .
clone project01.And as Not5 with function a = A.w5, function b = B.w5, function out = Out.w5, axiom .
clone project01.And as Not6 with function a = A.w6, function b = B.w6, function out = Out.w6, axiom .
clone project01.And as Not7 with function a = A.w7, function b = B.w7, function out = Out.w7, axiom .
clone project01.And as Not8 with function a = A.w8, function b = B.w8, function out = Out.w8, axiom .
clone project01.And as Not9 with function a = A.w9, function b = B.w9, function out = Out.w9, axiom .
clone project01.And as Not10 with function a = A.w10, function b = B.w10, function out = Out.w10, axiom .
clone project01.And as Not11 with function a = A.w11, function b = B.w11, function out = Out.w11, axiom .
clone project01.And as Not12 with function a = A.w12, function b = B.w12, function out = Out.w12, axiom .
clone project01.And as Not13 with function a = A.w13, function b = B.w13, function out = Out.w13, axiom .
clone project01.And as Not14 with function a = A.w14, function b = B.w14, function out = Out.w14, axiom .
clone project01.And as Not15 with function a = A.w15, function b = B.w15, function out = Out.w15, axiom .

clone project01.And16 as Specif
with
function a = a,
function b = b,
function out = out

end

(******************************)

theory Or16

use prelude.Map
use prelude.Wire
use bool.Bool
use prelude.Bin16

function a: wire16
function b: wire16
function out: wire16


clone prelude.Wire16 as A with function w = a, axiom .
clone prelude.Wire16 as B with function w = b, axiom .
clone prelude.Wire16 as Out with function w = out, axiom .

clone project01.Or as Not0 with function a = A.w0, function b = B.w0, function out = Out.w0, axiom .
clone project01.Or as Not1 with function a = A.w1, function b = B.w1, function out = Out.w1, axiom .
clone project01.Or as Not2 with function a = A.w2, function b = B.w2, function out = Out.w2, axiom .
clone project01.Or as Not3 with function a = A.w3, function b = B.w3, function out = Out.w3, axiom .
clone project01.Or as Not4 with function a = A.w4, function b = B.w4, function out = Out.w4, axiom .
clone project01.Or as Not5 with function a = A.w5, function b = B.w5, function out = Out.w5, axiom .
clone project01.Or as Not6 with function a = A.w6, function b = B.w6, function out = Out.w6, axiom .
clone project01.Or as Not7 with function a = A.w7, function b = B.w7, function out = Out.w7, axiom .
clone project01.Or as Not8 with function a = A.w8, function b = B.w8, function out = Out.w8, axiom .
clone project01.Or as Not9 with function a = A.w9, function b = B.w9, function out = Out.w9, axiom .
clone project01.Or as Not10 with function a = A.w10, function b = B.w10, function out = Out.w10, axiom .
clone project01.Or as Not11 with function a = A.w11, function b = B.w11, function out = Out.w11, axiom .
clone project01.Or as Not12 with function a = A.w12, function b = B.w12, function out = Out.w12, axiom .
clone project01.Or as Not13 with function a = A.w13, function b = B.w13, function out = Out.w13, axiom .
clone project01.Or as Not14 with function a = A.w14, function b = B.w14, function out = Out.w14, axiom .
clone project01.Or as Not15 with function a = A.w15, function b = B.w15, function out = Out.w15, axiom .

clone project01.Or16 as Specif
with
function a = a,
function b = b,
function out = out

end

(******************************)

theory Mux16

use prelude.Map
use prelude.Wire
use bool.Bool
use prelude.Bin16

function a: wire16
function b: wire16
function sel: wire
function out: wire16


clone prelude.Wire16 as A with function w = a, axiom .
clone prelude.Wire16 as B with function w = b, axiom .
clone prelude.Wire16 as Out with function w = out, axiom .

clone project01.Mux as Mux0 with function a = A.w0, function b = B.w0, function sel = sel, function out = Out.w0, axiom .
clone project01.Mux as Mux1 with function a = A.w1, function b = B.w1, function sel = sel, function out = Out.w1, axiom .
clone project01.Mux as Mux2 with function a = A.w2, function b = B.w2, function sel = sel, function out = Out.w2, axiom .
clone project01.Mux as Mux3 with function a = A.w3, function b = B.w3, function sel = sel, function out = Out.w3, axiom .
clone project01.Mux as Mux4 with function a = A.w4, function b = B.w4, function sel = sel, function out = Out.w4, axiom .
clone project01.Mux as Mux5 with function a = A.w5, function b = B.w5, function sel = sel, function out = Out.w5, axiom .
clone project01.Mux as Mux6 with function a = A.w6, function b = B.w6, function sel = sel, function out = Out.w6, axiom .
clone project01.Mux as Mux7 with function a = A.w7, function b = B.w7, function sel = sel, function out = Out.w7, axiom .
clone project01.Mux as Mux8 with function a = A.w8, function b = B.w8, function sel = sel, function out = Out.w8, axiom .
clone project01.Mux as Mux9 with function a = A.w9, function b = B.w9, function sel = sel, function out = Out.w9, axiom .
clone project01.Mux as Mux10 with function a = A.w10, function b = B.w10, function sel = sel, function out = Out.w10, axiom .
clone project01.Mux as Mux11 with function a = A.w11, function b = B.w11, function sel = sel, function out = Out.w11, axiom .
clone project01.Mux as Mux12 with function a = A.w12, function b = B.w12, function sel = sel, function out = Out.w12, axiom .
clone project01.Mux as Mux13 with function a = A.w13, function b = B.w13, function sel = sel, function out = Out.w13, axiom .
clone project01.Mux as Mux14 with function a = A.w14, function b = B.w14, function sel = sel, function out = Out.w14, axiom .
clone project01.Mux as Mux15 with function a = A.w15, function b = B.w15, function sel = sel, function out = Out.w15, axiom .

clone project01.Mux16 as Specif
with
function a = a,
function b = b,
function sel = sel,
function out = out

end

(******************************)

theory DMux16

use prelude.Map
use prelude.Wire
use bool.Bool
use prelude.Bin16

function in0: wire16
function sel: wire
function outa: wire16
function outb: wire16

clone prelude.Wire16 as Outa with function w = outa, axiom .
clone prelude.Wire16 as Outb with function w = outb, axiom .
clone prelude.Wire16 as In0 with function w = in0, axiom .

clone project01.DMux as DMux0 with function outa = Outa.w0, function outb = Outb.w0, function sel = sel, function in0 = In0.w0, axiom .
clone project01.DMux as DMux1 with function outa = Outa.w1, function outb = Outb.w1, function sel = sel, function in0 = In0.w1, axiom .
clone project01.DMux as DMux2 with function outa = Outa.w2, function outb = Outb.w2, function sel = sel, function in0 = In0.w2, axiom .
clone project01.DMux as DMux3 with function outa = Outa.w3, function outb = Outb.w3, function sel = sel, function in0 = In0.w3, axiom .
clone project01.DMux as DMux4 with function outa = Outa.w4, function outb = Outb.w4, function sel = sel, function in0 = In0.w4, axiom .
clone project01.DMux as DMux5 with function outa = Outa.w5, function outb = Outb.w5, function sel = sel, function in0 = In0.w5, axiom .
clone project01.DMux as DMux6 with function outa = Outa.w6, function outb = Outb.w6, function sel = sel, function in0 = In0.w6, axiom .
clone project01.DMux as DMux7 with function outa = Outa.w7, function outb = Outb.w7, function sel = sel, function in0 = In0.w7, axiom .
clone project01.DMux as DMux8 with function outa = Outa.w8, function outb = Outb.w8, function sel = sel, function in0 = In0.w8, axiom .
clone project01.DMux as DMux9 with function outa = Outa.w9, function outb = Outb.w9, function sel = sel, function in0 = In0.w9, axiom .
clone project01.DMux as DMux10 with function outa = Outa.w10, function outb = Outb.w10, function sel = sel, function in0 = In0.w10, axiom .
clone project01.DMux as DMux11 with function outa = Outa.w11, function outb = Outb.w11, function sel = sel, function in0 = In0.w11, axiom .
clone project01.DMux as DMux12 with function outa = Outa.w12, function outb = Outb.w12, function sel = sel, function in0 = In0.w12, axiom .
clone project01.DMux as DMux13 with function outa = Outa.w13, function outb = Outb.w13, function sel = sel, function in0 = In0.w13, axiom .
clone project01.DMux as DMux14 with function outa = Outa.w14, function outb = Outb.w14, function sel = sel, function in0 = In0.w14, axiom .
clone project01.DMux as DMux15 with function outa = Outa.w15, function outb = Outb.w15, function sel = sel, function in0 = In0.w15, axiom .

clone project01.DMux16 as Specif
with
function in0 = in0,
function sel = sel,
function outa = outa,
function outb = outb


end

(***)

theory Or8Way

use prelude.Map
use prelude.Wire
use bool.Bool
use prelude.Bin16
use prelude.Bin8

function in0: wire8
function out: wire

clone prelude.Wire8 as In0 with function w = in0, axiom .

(***)

clone project01.Or as Or01 with function a = In0.w0, function b = In0.w1, axiom .
clone project01.Or as Or23 with function a = In0.w2, function b = In0.w3, axiom .

clone project01.Or as Or45 with function a = In0.w4, function b = In0.w5, axiom .
clone project01.Or as Or67 with function a = In0.w6, function b = In0.w7, axiom .

clone project01.Or as Or0123 with function a = Or01.out, function b = Or23.out, axiom .
clone project01.Or as Or4567 with function a = Or45.out, function b = Or67.out, axiom .

clone project01.Or as Or01234567 with function a = Or0123.out, function b = Or4567.out, function out = out, axiom .

(***)

clone project01.Or8Way as Specif
with
function in0 = in0,
function out = out

(***)

end


theory Or16Way

use prelude.Map
use prelude.Wire
use bool.Bool
use prelude.Bin16

function in0: wire16
function out: wire

clone prelude.Wire16 as In0 with function w = in0, axiom .

(***)

(***)

clone project01.Or as Or01 with function a = In0.w0, function b = In0.w1, axiom .
clone project01.Or as Or23 with function a = In0.w2, function b = In0.w3, axiom .


clone project01.Or as Or45 with function a = In0.w4, function b = In0.w5, axiom .
clone project01.Or as Or67 with function a = In0.w6, function b = In0.w7, axiom .

clone project01.Or as Or89 with function a = In0.w8, function b = In0.w9, axiom .
clone project01.Or as Orab with function a = In0.w10, function b = In0.w11, axiom .

clone project01.Or as Orcd with function a = In0.w12, function b = In0.w13, axiom .
clone project01.Or as Oref with function a = In0.w14, function b = In0.w15, axiom .

(***)

clone project01.Or as Or0123 with function a = Or01.out, function b = Or23.out, axiom .
clone project01.Or as Or4567 with function a = Or45.out, function b = Or67.out, axiom .
clone project01.Or as Or89ab with function a = Or89.out, function b = Orab.out, axiom .
clone project01.Or as Orcdef with function a = Orcd.out, function b = Oref.out, axiom .

(***)

clone project01.Or as Or01234567 with function a = Or0123.out, function b = Or4567.out, axiom .
clone project01.Or as Or89abcdef with function a = Or89ab.out, function b = Orcdef.out, axiom .

(***)

clone project01.Or as Or0123456789abcdef with function a = Or01234567.out, function b = Or89abcdef.out, axiom .

(***)

clone project01.Or16Way as Specif
with
function in0 = in0,
function out = Or0123456789abcdef.out

(***)

end

(******)

theory Mux4Way16

use prelude.Map
use prelude.Wire
use bool.Bool
use prelude.Bin16
use prelude.Bin2

function a: wire16
function b: wire16
function c: wire16
function d: wire16
function sel: wire2
function out: wire16

clone prelude.Wire2 as Sel with function w = sel, axiom .

clone project01.Mux16 as Muxab with function a = a, function b = b, function sel = Sel.w0, axiom .
clone project01.Mux16 as Muxcd with function a = c, function b = d, function sel = Sel.w0, axiom .
clone project01.Mux16 as Muxabcd with function a = Muxab.out, function b = Muxcd.out, function sel = Sel.w1, function out = out, axiom .

clone project01.Mux4Way16 as Specif
with
function a = a,
function b = b,
function c = c,
function d = d,
function sel = sel,
function out = out

end

(******)

theory Mux8Way16

use prelude.Map
use prelude.Wire
use bool.Bool
use prelude.Bin16
use prelude.Bin3

function a: wire16
function b: wire16
function c: wire16
function d: wire16
function e: wire16
function f: wire16
function g: wire16
function h: wire16
function sel: wire3
function out: wire16

clone prelude.Wire3 as Sel with function w = sel, axiom .

clone project01.Mux16 as Muxab with function a = a, function b = b, function sel = Sel.w0, axiom .
clone project01.Mux16 as Muxcd with function a = c, function b = d, function sel = Sel.w0, axiom .
clone project01.Mux16 as Muxef with function a = e, function b = f, function sel = Sel.w0, axiom .
clone project01.Mux16 as Muxgh with function a = g, function b = h, function sel = Sel.w0, axiom .

clone project01.Mux16 as Muxabcd with function a = Muxab.out, function b = Muxcd.out, function sel = Sel.w1, axiom .
clone project01.Mux16 as Muxefgh with function a = Muxef.out, function b = Muxgh.out, function sel = Sel.w1, axiom .

clone project01.Mux16 as Muxabcdefgh with function a = Muxabcd.out, function b = Muxefgh.out, function sel = Sel.w2, function out = out, axiom .

clone project01.Mux8Way16 as Specif
with
function a = a,
function b = b,
function c = c,
function d = d,
function e = e,
function f = f,
function g = g,
function h = h,
function sel = sel,
function out = out

end

(****)


theory Mux8Way

use prelude.Map
use prelude.Wire
use bool.Bool
use prelude.Bin16
use prelude.Bin3

function a: wire
function b: wire
function c: wire
function d: wire
function e: wire
function f: wire
function g: wire
function h: wire
function sel: wire3
function out: wire

clone prelude.Wire3 as Sel with function w = sel, axiom .

clone project01.Mux as Muxab with function a = a, function b = b, function sel = Sel.w0, axiom .
clone project01.Mux as Muxcd with function a = c, function b = d, function sel = Sel.w0, axiom .
clone project01.Mux as Muxef with function a = e, function b = f, function sel = Sel.w0, axiom .
clone project01.Mux as Muxgh with function a = g, function b = h, function sel = Sel.w0, axiom .

clone project01.Mux as Muxabcd with function a = Muxab.out, function b = Muxcd.out, function sel = Sel.w1, axiom .
clone project01.Mux as Muxefgh with function a = Muxef.out, function b = Muxgh.out, function sel = Sel.w1, axiom .

clone project01.Mux as Muxabcdefgh with function a = Muxabcd.out, function b = Muxefgh.out, function sel = Sel.w2, function out = out, axiom .

clone project01.Mux8Way as Specif
with
function a = a,
function b = b,
function c = c,
function d = d,
function e = e,
function f = f,
function g = g,
function h = h,
function sel = sel,
function out = out

end


(*******)

theory DMux4Way16

use prelude.Map
use prelude.Wire
use bool.Bool
use prelude.Bin16
use prelude.Bin2

function in0: wire16
function sel: wire2
function outa: wire16
function outb: wire16
function outc: wire16
function outd: wire16

clone prelude.Wire2 as Sel with function w = sel, axiom .

clone project01.DMux16 as DMux1 with function in0 = in0, function sel = Sel.w1, axiom .
clone project01.DMux16 as DMux2 with function in0 = DMux1.outa, function sel = Sel.w0, function outa = outa, function outb = outb, axiom .
clone project01.DMux16 as DMux3 with function in0 = DMux1.outb, function sel = Sel.w0, function outa = outc, function outb = outd, axiom .

clone project01.DMux4Way16 as Specif
with
function in0 = in0,
function sel = sel,
function outa = outa,
function outb = outb,
function outc = outc,
function outd = outd

end

(*******)

theory DMux8Way16

use prelude.Map
use prelude.Wire
use bool.Bool
use prelude.Bin16
use prelude.Bin3

function in0: wire16
function sel: wire3
function outa: wire16
function outb: wire16
function outc: wire16
function outd: wire16
function oute: wire16
function outf: wire16
function outg: wire16
function outh: wire16

clone prelude.Wire3 as Sel with function w = sel, axiom .

clone project01.DMux16 as DMux1 with function in0 = in0, function sel = Sel.w2, axiom .
clone project01.DMux16 as DMux2 with function in0 = DMux1.outa, function sel = Sel.w1, axiom .
clone project01.DMux16 as DMux3 with function in0 = DMux1.outb, function sel = Sel.w1, axiom .

clone project01.DMux16 as DMux4 with function in0 = DMux2.outa, function sel = Sel.w0, function outa = outa, function outb = outb, axiom .
clone project01.DMux16 as DMux5 with function in0 = DMux2.outb, function sel = Sel.w0, function outa = outc, function outb = outd, axiom .

clone project01.DMux16 as DMux6 with function in0 = DMux3.outa, function sel = Sel.w0, function outa = oute, function outb = outf, axiom .
clone project01.DMux16 as DMux7 with function in0 = DMux3.outb, function sel = Sel.w0, function outa = outg, function outb = outh, axiom .


clone project01.DMux8Way16 as Specif
with
function in0 = in0,
function sel = sel,
function outa = outa,
function outb = outb,
function outc = outc,
function outd = outd,
function oute = oute,
function outf = outf,
function outg = outg,
function outh = outh

end

(*******)

theory DMux8Way

use prelude.Map
use prelude.Wire
use bool.Bool
use prelude.Bin16
use prelude.Bin3

function in0: wire
function sel: wire3
function outa: wire
function outb: wire
function outc: wire
function outd: wire
function oute: wire
function outf: wire
function outg: wire
function outh: wire

clone prelude.Wire3 as Sel with function w = sel, axiom .

clone project01.DMux as DMux1 with function in0 = in0, function sel = Sel.w2, axiom .
clone project01.DMux as DMux2 with function in0 = DMux1.outa, function sel = Sel.w1, axiom .
clone project01.DMux as DMux3 with function in0 = DMux1.outb, function sel = Sel.w1, axiom .

clone project01.DMux as DMux4 with function in0 = DMux2.outa, function sel = Sel.w0, function outa = outa, function outb = outb, axiom .
clone project01.DMux as DMux5 with function in0 = DMux2.outb, function sel = Sel.w0, function outa = outc, function outb = outd, axiom .

clone project01.DMux as DMux6 with function in0 = DMux3.outa, function sel = Sel.w0, function outa = oute, function outb = outf, axiom .
clone project01.DMux as DMux7 with function in0 = DMux3.outb, function sel = Sel.w0, function outa = outg, function outb = outh, axiom .


clone project01.DMux8Way as Specif
with
function in0 = in0,
function sel = sel,
function outa = outa,
function outb = outb,
function outc = outc,
function outd = outd,
function oute = oute,
function outf = outf,
function outg = outg,
function outh = outh

end
