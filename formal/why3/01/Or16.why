theory OR16

(**)

use import int.Int
use import bool.Bool

use import builtins.Wire
use import builtins.WireVector

use builtins.OR

(**)

function in0: WireVector.t
function in1: WireVector.t

function out0: WireVector.t

(**)


function in0_0: Wire.t = in0[0 ..]
function in0_1: Wire.t = in0[1 ..]
function in0_2: Wire.t = in0[2 ..]
function in0_3: Wire.t = in0[3 ..]
function in0_4: Wire.t = in0[4 ..]
function in0_5: Wire.t = in0[5 ..]
function in0_6: Wire.t = in0[6 ..]
function in0_7: Wire.t = in0[7 ..]
function in0_8: Wire.t = in0[8 ..]
function in0_9: Wire.t = in0[9 ..]
function in0_10: Wire.t = in0[10 ..]
function in0_11: Wire.t = in0[11 ..]
function in0_12: Wire.t = in0[12 ..]
function in0_13: Wire.t = in0[13 ..]
function in0_14: Wire.t = in0[14 ..]
function in0_15: Wire.t = in0[15 ..]

function in1_0: Wire.t = in1[0 ..]
function in1_1: Wire.t = in1[1 ..]
function in1_2: Wire.t = in1[2 ..]
function in1_3: Wire.t = in1[3 ..]
function in1_4: Wire.t = in1[4 ..]
function in1_5: Wire.t = in1[5 ..]
function in1_6: Wire.t = in1[6 ..]
function in1_7: Wire.t = in1[7 ..]
function in1_8: Wire.t = in1[8 ..]
function in1_9: Wire.t = in1[9 ..]
function in1_10: Wire.t = in1[10 ..]
function in1_11: Wire.t = in1[11 ..]
function in1_12: Wire.t = in1[12 ..]
function in1_13: Wire.t = in1[13 ..]
function in1_14: Wire.t = in1[14 ..]
function in1_15: Wire.t = in1[15 ..]


function out0_0: Wire.t = out0[0 ..]
function out0_1: Wire.t = out0[1 ..]
function out0_2: Wire.t = out0[2 ..]
function out0_3: Wire.t = out0[3 ..]
function out0_4: Wire.t = out0[4 ..]
function out0_5: Wire.t = out0[5 ..]
function out0_6: Wire.t = out0[6 ..]
function out0_7: Wire.t = out0[7 ..]
function out0_8: Wire.t = out0[8 ..]
function out0_9: Wire.t = out0[9 ..]
function out0_10: Wire.t = out0[10 ..]
function out0_11: Wire.t = out0[11 ..]
function out0_12: Wire.t = out0[12 ..]
function out0_13: Wire.t = out0[13 ..]
function out0_14: Wire.t = out0[14 ..]
function out0_15: Wire.t = out0[15 ..]

clone builtins.OR as OR1 with function in0 = in0_0, function in1 = in1_0, function out0 = out0_0
clone builtins.OR as OR2 with function in0 = in0_1, function in1 = in1_1, function out0 = out0_1
clone builtins.OR as OR3 with function in0 = in0_2, function in1 = in1_2, function out0 = out0_2
clone builtins.OR as OR4 with function in0 = in0_3, function in1 = in1_3, function out0 = out0_3
clone builtins.OR as OR5 with function in0 = in0_4, function in1 = in1_4, function out0 = out0_4
clone builtins.OR as OR6 with function in0 = in0_5, function in1 = in1_5, function out0 = out0_5
clone builtins.OR as OR7 with function in0 = in0_6, function in1 = in1_6, function out0 = out0_6
clone builtins.OR as OR8 with function in0 = in0_7, function in1 = in1_7, function out0 = out0_7
clone builtins.OR as OR9 with function in0 = in0_8, function in1 = in1_8, function out0 = out0_8
clone builtins.OR as OR10 with function in0 = in0_9, function in1 = in1_9, function out0 = out0_9
clone builtins.OR as OR11 with function in0 = in0_10, function in1 = in1_10, function out0 = out0_10
clone builtins.OR as OR12 with function in0 = in0_11, function in1 = in1_11, function out0 = out0_11
clone builtins.OR as OR13 with function in0 = in0_12, function in1 = in1_12, function out0 = out0_12
clone builtins.OR as OR14 with function in0 = in0_13, function in1 = in1_13, function out0 = out0_13
clone builtins.OR as OR15 with function in0 = in0_14, function in1 = in1_14, function out0 = out0_14
clone builtins.OR as OR16 with function in0 = in0_15, function in1 = in1_15, function out0 = out0_15


(**)

lemma sem:
	forall t: int.
	forall n. 0 <= n < 16 ->
	out0[n ..][t] = orb in0[n ..][t] in1[n ..][t]


end
