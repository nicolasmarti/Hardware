theory BinArith

use import int.Int
use import bool.Bool
use import bv.Pow2int
use import int.EuclideanDivision

(***)

function bit_value (b: bool) (w: int): int = if b then pow2 w else 0
lemma bit_value_min: forall b: bool, w: int.
      w >= 0 ->
      0 <= bit_value b w
lemma bit_value_max: forall b: bool, w: int.
      w >= 0 ->
      bit_value b w <= pow2 w


(***)

function ha_sum (b1 b2: bool): bool = xorb b1 b2
function ha_carry (b1 b2: bool): bool = andb b1 b2

lemma ha_semantics: forall b1 b2: bool, w: int.
      w >= 0 ->
      bit_value b1 w + bit_value b2 w = bit_value (ha_sum b1 b2) w + bit_value (ha_carry b1 b2) (w+1)

(***)

function fa_sum (b1 b2 c: bool): bool = xorb (xorb b1 b2) c
function fa_carry (b1 b2 c: bool): bool = orb (andb b1 b2) (orb (andb b1 c) (andb b2 c))

lemma fa_semantics: forall b1 b2 c: bool, w: int.
      w >= 0 ->
      bit_value b1 w + bit_value b2 w + bit_value c w = bit_value (fa_sum b1 b2 c) w + bit_value (fa_carry b1 b2 c) (w+1)

(***)

lemma bit_value_mod_pow2_0: forall n m: int, b:bool.
      n >= 0 -> m >= 0 ->
      n >= m ->
      mod (bit_value b n) (pow2 m) = 0
      by pow2 n = pow2 (n-m) * pow2 m

lemma bit_value_mod_pow2_id: forall n m: int, b: bool.
      n >= 0 -> m >= 0 ->
      n < m ->
      mod (bit_value b n) (pow2 m) = (bit_value b n)
      by pow2 m = pow2 (m-n-1) * 2 * pow2 n

lemma bit_value_div_pow2_0: forall n m: int, b: bool.
      n >= 0 -> m >= 0 ->
      n < m ->
      div (bit_value b n) (pow2 m) = 0

(***)

end

theory Bit16

use import int.Int
use import bool.Bool
use import bv.Pow2int
use import BinArith
use import int.EuclideanDivision

type t = (bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)

function to_uint (b: t): int =
         let (b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15) = b in
         bit_value b0 0 +
         bit_value b1 1 +
         bit_value b2 2 +
         bit_value b3 3 +
         bit_value b4 4 +
         bit_value b5 5 +
         bit_value b6 6 +
         bit_value b7 7 +
         bit_value b8 8 +
         bit_value b9 9 +
         bit_value b10 10 +
         bit_value b11 11 +
         bit_value b12 12 +
         bit_value b13 13 +
         bit_value b14 14 +
         bit_value b15 15

(***)



(***)

function add (a b: t): (t, bool)

axiom add_def: forall a b: t.

      add a b =
         let (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) = a in
         let (b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15) = b in

         let sum0 = ha_sum a0 b0 in
         let carry0 = ha_carry a0 b0 in

         let sum1 = fa_sum a1 b1 carry0 in
         let carry1 = fa_carry a1 b1 carry0 in

         let sum2 = fa_sum a2 b2 carry1 in
         let carry2 = fa_carry a2 b2 carry1 in

         let sum3 = fa_sum a3 b3 carry2 in
         let carry3 = fa_carry a3 b3 carry2 in

         let sum4 = fa_sum a4 b4 carry3 in
         let carry4 = fa_carry a4 b4 carry3 in

         let sum5 = fa_sum a5 b5 carry4 in
         let carry5 = fa_carry a5 b5 carry4 in

         let sum6 = fa_sum a6 b6 carry5 in
         let carry6 = fa_carry a6 b6 carry5 in

         let sum7 = fa_sum a7 b7 carry6 in
         let carry7 = fa_carry a7 b7 carry6 in

         let sum8 = fa_sum a8 b8 carry7 in
         let carry8 = fa_carry a8 b8 carry7 in

         let sum9 = fa_sum a9 b9 carry8 in
         let carry9 = fa_carry a9 b9 carry8 in

         let sum10 = fa_sum a10 b10 carry9 in
         let carry10 = fa_carry a10 b10 carry9 in

         let sum11 = fa_sum a11 b11 carry10 in
         let carry11 = fa_carry a11 b11 carry10 in

         let sum12 = fa_sum a12 b12 carry11 in
         let carry12 = fa_carry a12 b12 carry11 in

         let sum13 = fa_sum a13 b13 carry12 in
         let carry13 = fa_carry a13 b13 carry12 in

         let sum14 = fa_sum a14 b14 carry13 in
         let carry14 = fa_carry a14 b14 carry13 in

         let sum15 = fa_sum a15 b15 carry14 in
         let carry15 = fa_carry a15 b15 carry14 in
         
         ((sum0, sum1, sum2, sum3, sum4, sum5, sum6, sum7, sum8, sum9, sum10, sum11, sum12, sum13, sum14, sum15), carry15)

lemma add_semantics_helper: forall a b: t.
      let (res, carry) = (
               let (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) = a in
         let (b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15) = b in

         let sum0 = ha_sum a0 b0 in
         let carry0 = ha_carry a0 b0 in

         let sum1 = fa_sum a1 b1 carry0 in
         let carry1 = fa_carry a1 b1 carry0 in

         let sum2 = fa_sum a2 b2 carry1 in
         let carry2 = fa_carry a2 b2 carry1 in

         let sum3 = fa_sum a3 b3 carry2 in
         let carry3 = fa_carry a3 b3 carry2 in

         let sum4 = fa_sum a4 b4 carry3 in
         let carry4 = fa_carry a4 b4 carry3 in

         let sum5 = fa_sum a5 b5 carry4 in
         let carry5 = fa_carry a5 b5 carry4 in

         let sum6 = fa_sum a6 b6 carry5 in
         let carry6 = fa_carry a6 b6 carry5 in

         let sum7 = fa_sum a7 b7 carry6 in
         let carry7 = fa_carry a7 b7 carry6 in

         let sum8 = fa_sum a8 b8 carry7 in
         let carry8 = fa_carry a8 b8 carry7 in

         let sum9 = fa_sum a9 b9 carry8 in
         let carry9 = fa_carry a9 b9 carry8 in

         let sum10 = fa_sum a10 b10 carry9 in
         let carry10 = fa_carry a10 b10 carry9 in

         let sum11 = fa_sum a11 b11 carry10 in
         let carry11 = fa_carry a11 b11 carry10 in

         let sum12 = fa_sum a12 b12 carry11 in
         let carry12 = fa_carry a12 b12 carry11 in

         let sum13 = fa_sum a13 b13 carry12 in
         let carry13 = fa_carry a13 b13 carry12 in

         let sum14 = fa_sum a14 b14 carry13 in
         let carry14 = fa_carry a14 b14 carry13 in

         let sum15 = fa_sum a15 b15 carry14 in
         let carry15 = fa_carry a15 b15 carry14 in
         
         ((sum0, sum1, sum2, sum3, sum4, sum5, sum6, sum7, sum8, sum9, sum10, sum11, sum12, sum13, sum14, sum15), carry15)
         
         ) in
      to_uint a + to_uint b = to_uint res + bit_value carry 16

lemma add_semantics: forall a b: t.
      let (res, carry) = add a b in
      to_uint a + to_uint b = to_uint res + bit_value carry 16

lemma add_semantics_modulo: forall a b: t.
      let (res, carry) = add a b in
      to_uint a + to_uint b = to_uint res + bit_value carry 16



end

