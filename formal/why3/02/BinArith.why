theory ModuloExt

use import int.Int
use import bool.Bool
use import bv.Pow2int
use import int.EuclideanDivision

(****)

lemma div_x_x: forall x: int.
      x > 0 ->
      div x x = 1

lemma div_x_2x: forall x y: int.
      y > 0 -> y <= x < 2*y ->
      div x y = 1
      by 0 <= (x-y) < y /\ x = y + (x-y)

lemma div_add: forall x y z: int.
      x >= 0 -> y >= 0 -> z > 0 ->
      x + y < z ->
      div (x + y) z = 0

(****)


lemma mod_add_left_0: forall x y z: int.
      z > 0 ->
      x >= 0 -> y >= 0 ->
      mod x z = 0 ->
      mod (x + y) z = mod y z

lemma mod_add_right_0: forall x y z: int.
      z > 0 ->
      x >= 0 -> y >= 0 ->
      mod y z = 0 ->
      mod (x + y) z = mod x z

lemma mod_add_0: forall x y z: int.
      z > 0 ->
      x >= 0 -> y >= 0 ->
      mod x z = 0 ->
      mod y z = 0 ->
      mod (x + y) z = 0

lemma mod_add: forall x y z: int.
      x >= 0 -> y >= 0 ->
      z > 0 ->
      x + y < z ->
      mod (x + y) z = x + y

end

theory ModuloPow2

use import int.Int
use import bool.Bool
use import bv.Pow2int
use import int.EuclideanDivision
use import ModuloExt

lemma mod_pow2_0: forall n m: int.
      n >= 0 -> m >= 0 ->
      n >= m ->
      mod (pow2 n) (pow2 m) = 0
      by pow2 n = pow2 (n-m) * pow2 m

lemma mod_pow2_id: forall n m: int.
      n >= 0 -> m >= 0 ->
      n < m ->
      mod (pow2 n) (pow2 m) = (pow2 n)
      by pow2 m = pow2 (m-n-1) * 2 * pow2 n

lemma div_pow2_0: forall n m: int.
      n >= 0 -> m >= 0 ->
      n < m ->
      div (pow2 n) (pow2 m) = 0

lemma pow2_leq_twice: forall x y: int.
      0 <= x < y ->
      2 * pow2 x <= pow2 y
      by pow2 y = pow2 x * 2 * pow2 (y-x-1) /\
         pow2 (y-x-1) >= 1

lemma pow2_lt: forall x y: int.
      0 <= x < y ->
      pow2 x < pow2 y

lemma pow2_add_lt: forall x y z: int.
      0 <= x < y < z ->
      pow2 x + pow2 y < pow2 z
      by pow2 x * 2 <= pow2 y /\ pow2 y * 2 <= pow2 z

lemma pow2_add_neq: forall x y z: int.
      0 <= x < z ->
      0 <= y < z ->
      x <> y ->
      pow2 x + pow2 y < pow2 z

(**)

function div_mod (i: int) (w: int): int = div (mod i (pow2 (w+1))) (pow2 w)

lemma div_mod_pow2_0: forall n w: int.
      n >= 0 -> w >= 0 ->
      n <> w ->
      div_mod (pow2 n) w = 0
      by (
        n < w so div (pow2 n) (pow2 w) = 0
      ) \/ (
        w < n so mod (pow2 n) (pow2 (w+1)) = 0 /\ div 0 (pow2 w) = 0(* weird *)
      )

lemma div_mod_pow2_1: forall w: int.
      w >= 0 ->
      div_mod (pow2 w) w = 1
      by mod (pow2 w) (pow2 (w+1)) = pow2 w /\ div (pow2 w) (pow2 w) = 1

lemma div_mod_0_1: forall i w: int.
      w >= 0 ->
      div_mod i w = 0 \/ div_mod i w = 1
      by 0 <= mod i (pow2 (w+1)) < (pow2 (w+1)) /\ pow2 (w+1) = 2 * pow2 w
      (* so 0 <= mod i (pow2 (w+1)) < pow2 w \/ pow2 w <= mod i (pow2 (w+1)) < 2 * pow2 w *)


end



theory BinArith

use import int.Int
use import bool.Bool
use import bv.Pow2int
use import int.EuclideanDivision

(***)

function bit_value (b: bool) (w: int): int = if b then pow2 w else 0
lemma bit_value_min: forall b: bool, w: int.
      w >= 0 ->
      0 <= bit_value b w
lemma bit_value_max: forall b: bool, w: int.
      w >= 0 ->
      bit_value b w <= pow2 w


(***)

function ha_sum (b1 b2: bool): bool = xorb b1 b2
function ha_carry (b1 b2: bool): bool = andb b1 b2

lemma ha_semantics: forall b1 b2: bool, w: int.
      w >= 0 ->
      bit_value b1 w + bit_value b2 w = bit_value (ha_sum b1 b2) w + bit_value (ha_carry b1 b2) (w+1)

(***)

function fa_sum (b1 b2 c: bool): bool = xorb (xorb b1 b2) c
function fa_carry (b1 b2 c: bool): bool = orb (andb b1 b2) (orb (andb b1 c) (andb b2 c))

lemma fa_semantics: forall b1 b2 c: bool, w: int.
      w >= 0 ->
      bit_value b1 w + bit_value b2 w + bit_value c w = bit_value (fa_sum b1 b2 c) w + bit_value (fa_carry b1 b2 c) (w+1)

(***)

use import ModuloExt
use import ModuloPow2


end

theory Bit16

use import int.Int
use import bool.Bool
use import bv.Pow2int
use import BinArith
use import int.EuclideanDivision

type t = (bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)

(**)

function to_uint (b: t): int =
         let (b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15) = b in
         bit_value b0 0 +
         bit_value b1 1 +
         bit_value b2 2 +
         bit_value b3 3 +
         bit_value b4 4 +
         bit_value b5 5 +
         bit_value b6 6 +
         bit_value b7 7 +
         bit_value b8 8 +
         bit_value b9 9 +
         bit_value b10 10 +
         bit_value b11 11 +
         bit_value b12 12 +
         bit_value b13 13 +
         bit_value b14 14 +
         bit_value b15 15

(**)

(***)



(***)

function add (a b: t): (t, bool) =
         let (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) = a in
         let (b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15) = b in

         let sum0 = ha_sum a0 b0 in
         let carry0 = ha_carry a0 b0 in

         let sum1 = fa_sum a1 b1 carry0 in
         let carry1 = fa_carry a1 b1 carry0 in

         let sum2 = fa_sum a2 b2 carry1 in
         let carry2 = fa_carry a2 b2 carry1 in

         let sum3 = fa_sum a3 b3 carry2 in
         let carry3 = fa_carry a3 b3 carry2 in

         let sum4 = fa_sum a4 b4 carry3 in
         let carry4 = fa_carry a4 b4 carry3 in

         let sum5 = fa_sum a5 b5 carry4 in
         let carry5 = fa_carry a5 b5 carry4 in

         let sum6 = fa_sum a6 b6 carry5 in
         let carry6 = fa_carry a6 b6 carry5 in

         let sum7 = fa_sum a7 b7 carry6 in
         let carry7 = fa_carry a7 b7 carry6 in

         let sum8 = fa_sum a8 b8 carry7 in
         let carry8 = fa_carry a8 b8 carry7 in

         let sum9 = fa_sum a9 b9 carry8 in
         let carry9 = fa_carry a9 b9 carry8 in

         let sum10 = fa_sum a10 b10 carry9 in
         let carry10 = fa_carry a10 b10 carry9 in

         let sum11 = fa_sum a11 b11 carry10 in
         let carry11 = fa_carry a11 b11 carry10 in

         let sum12 = fa_sum a12 b12 carry11 in
         let carry12 = fa_carry a12 b12 carry11 in

         let sum13 = fa_sum a13 b13 carry12 in
         let carry13 = fa_carry a13 b13 carry12 in

         let sum14 = fa_sum a14 b14 carry13 in
         let carry14 = fa_carry a14 b14 carry13 in

         let sum15 = fa_sum a15 b15 carry14 in
         let carry15 = fa_carry a15 b15 carry14 in
         
         ((sum0, sum1, sum2, sum3, sum4, sum5, sum6, sum7, sum8, sum9, sum10, sum11, sum12, sum13, sum14, sum15), carry15)

lemma add_semantics: forall a b: t.
      let (res, carry) = add a b in
      to_uint a + to_uint b = to_uint res + bit_value carry 16
      by       let (res, carry) = (
               let (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) = a in
         let (b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15) = b in

         let sum0 = ha_sum a0 b0 in
         let carry0 = ha_carry a0 b0 in

         let sum1 = fa_sum a1 b1 carry0 in
         let carry1 = fa_carry a1 b1 carry0 in

         let sum2 = fa_sum a2 b2 carry1 in
         let carry2 = fa_carry a2 b2 carry1 in

         let sum3 = fa_sum a3 b3 carry2 in
         let carry3 = fa_carry a3 b3 carry2 in

         let sum4 = fa_sum a4 b4 carry3 in
         let carry4 = fa_carry a4 b4 carry3 in

         let sum5 = fa_sum a5 b5 carry4 in
         let carry5 = fa_carry a5 b5 carry4 in

         let sum6 = fa_sum a6 b6 carry5 in
         let carry6 = fa_carry a6 b6 carry5 in

         let sum7 = fa_sum a7 b7 carry6 in
         let carry7 = fa_carry a7 b7 carry6 in

         let sum8 = fa_sum a8 b8 carry7 in
         let carry8 = fa_carry a8 b8 carry7 in

         let sum9 = fa_sum a9 b9 carry8 in
         let carry9 = fa_carry a9 b9 carry8 in

         let sum10 = fa_sum a10 b10 carry9 in
         let carry10 = fa_carry a10 b10 carry9 in

         let sum11 = fa_sum a11 b11 carry10 in
         let carry11 = fa_carry a11 b11 carry10 in

         let sum12 = fa_sum a12 b12 carry11 in
         let carry12 = fa_carry a12 b12 carry11 in

         let sum13 = fa_sum a13 b13 carry12 in
         let carry13 = fa_carry a13 b13 carry12 in

         let sum14 = fa_sum a14 b14 carry13 in
         let carry14 = fa_carry a14 b14 carry13 in

         let sum15 = fa_sum a15 b15 carry14 in
         let carry15 = fa_carry a15 b15 carry14 in
         
         ((sum0, sum1, sum2, sum3, sum4, sum5, sum6, sum7, sum8, sum9, sum10, sum11, sum12, sum13, sum14, sum15), carry15)
         
         ) in
      to_uint a + to_uint b = to_uint res + bit_value carry 16


lemma add_semantics_modulo: forall a b: t.
      let (res, carry) = add a b in
      mod (to_uint a + to_uint b) (pow2 16) = to_uint res
      by mod (bit_value carry 16) (pow2 16) = 0



(*****)


(* function from_uint (i: int): t = *)
(*          ( value_bit i 0, *)
(*            value_bit i 1, *)
(*            value_bit i 2, *)
(*            value_bit i 3, *)
(*            value_bit i 4, *)
(*            value_bit i 5, *)
(*            value_bit i 6, *)
(*            value_bit i 7, *)
(*            value_bit i 8, *)
(*            value_bit i 9, *)
(*            value_bit i 10, *)
(*            value_bit i 11, *)
(*            value_bit i 12, *)
(*            value_bit i 13, *)
(*            value_bit i 14, *)
(*            value_bit i 15 ) *)

(* lemma to_from_uint: forall b: t. *)
(*       from_uint (to_uint b) = b *)


end

