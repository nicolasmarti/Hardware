
theory ADD16

(**)

use import int.Int
use import bool.Bool
use import bv.Pow2int

use import builtins.Wire
use import builtins.WireVector

use import builtins.HalfAdder
use import builtins.FullAdder

(**)

function in0: WireVector.t
function in1: WireVector.t

function out0: WireVector.t
function carry: Wire.t

(**)

function in0_0: Wire.t = in0[0 ..]
function in0_1: Wire.t = in0[1 ..]
function in0_2: Wire.t = in0[2 ..]
function in0_3: Wire.t = in0[3 ..]
function in0_4: Wire.t = in0[4 ..]
function in0_5: Wire.t = in0[5 ..]
function in0_6: Wire.t = in0[6 ..]
function in0_7: Wire.t = in0[7 ..]
function in0_8: Wire.t = in0[8 ..]
function in0_9: Wire.t = in0[9 ..]
function in0_10: Wire.t = in0[10 ..]
function in0_11: Wire.t = in0[11 ..]
function in0_12: Wire.t = in0[12 ..]
function in0_13: Wire.t = in0[13 ..]
function in0_14: Wire.t = in0[14 ..]
function in0_15: Wire.t = in0[15 ..]

function in1_0: Wire.t = in1[0 ..]
function in1_1: Wire.t = in1[1 ..]
function in1_2: Wire.t = in1[2 ..]
function in1_3: Wire.t = in1[3 ..]
function in1_4: Wire.t = in1[4 ..]
function in1_5: Wire.t = in1[5 ..]
function in1_6: Wire.t = in1[6 ..]
function in1_7: Wire.t = in1[7 ..]
function in1_8: Wire.t = in1[8 ..]
function in1_9: Wire.t = in1[9 ..]
function in1_10: Wire.t = in1[10 ..]
function in1_11: Wire.t = in1[11 ..]
function in1_12: Wire.t = in1[12 ..]
function in1_13: Wire.t = in1[13 ..]
function in1_14: Wire.t = in1[14 ..]
function in1_15: Wire.t = in1[15 ..]

function out0_0: Wire.t = out0[0 ..]
function out0_1: Wire.t = out0[1 ..]
function out0_2: Wire.t = out0[2 ..]
function out0_3: Wire.t = out0[3 ..]
function out0_4: Wire.t = out0[4 ..]
function out0_5: Wire.t = out0[5 ..]
function out0_6: Wire.t = out0[6 ..]
function out0_7: Wire.t = out0[7 ..]
function out0_8: Wire.t = out0[8 ..]
function out0_9: Wire.t = out0[9 ..]
function out0_10: Wire.t = out0[10 ..]
function out0_11: Wire.t = out0[11 ..]
function out0_12: Wire.t = out0[12 ..]
function out0_13: Wire.t = out0[13 ..]
function out0_14: Wire.t = out0[14 ..]
function out0_15: Wire.t = out0[15 ..]

(**)

function carry_0: Wire.t
function carry_1: Wire.t
function carry_2: Wire.t
function carry_3: Wire.t
function carry_4: Wire.t
function carry_5: Wire.t
function carry_6: Wire.t
function carry_7: Wire.t
function carry_8: Wire.t
function carry_9: Wire.t
function carry_10: Wire.t
function carry_11: Wire.t
function carry_12: Wire.t
function carry_13: Wire.t
function carry_14: Wire.t

constant weight_0: int = 0
constant weight_1: int = 1
constant weight_2: int = 2
constant weight_3: int = 3
constant weight_4: int = 4
constant weight_5: int = 5
constant weight_6: int = 6
constant weight_7: int = 7
constant weight_8: int = 8
constant weight_9: int = 9
constant weight_10: int = 10
constant weight_11: int = 11
constant weight_12: int = 12
constant weight_13: int = 13
constant weight_14: int = 14
constant weight_15: int = 15
constant weight_16: int = 16

clone builtins.HalfAdder as HA0 with function in0 = in0_0, function in1 = in1_0, function sum = out0_0, function carry = carry_0, constant weight = weight_0
clone builtins.FullAdder as FA0 with function in0 = in0_1, function in1 = in1_1, function in2 = carry_0, function sum = out0_1, function carry = carry_1, constant weight = weight_1
clone builtins.FullAdder as FA1 with function in0 = in0_2, function in1 = in1_2, function in2 = carry_1, function sum = out0_2, function carry = carry_2, constant weight = weight_2
clone builtins.FullAdder as FA2 with function in0 = in0_3, function in1 = in1_3, function in2 = carry_2, function sum = out0_3, function carry = carry_3, constant weight = weight_3
clone builtins.FullAdder as FA3 with function in0 = in0_4, function in1 = in1_4, function in2 = carry_3, function sum = out0_4, function carry = carry_4, constant weight = weight_4
clone builtins.FullAdder as FA4 with function in0 = in0_5, function in1 = in1_5, function in2 = carry_4, function sum = out0_5, function carry = carry_5, constant weight = weight_5
clone builtins.FullAdder as FA5 with function in0 = in0_6, function in1 = in1_6, function in2 = carry_5, function sum = out0_6, function carry = carry_6, constant weight = weight_6
clone builtins.FullAdder as FA6 with function in0 = in0_7, function in1 = in1_7, function in2 = carry_6, function sum = out0_7, function carry = carry_7, constant weight = weight_7
clone builtins.FullAdder as FA7 with function in0 = in0_8, function in1 = in1_8, function in2 = carry_7, function sum = out0_8, function carry = carry_8, constant weight = weight_8
clone builtins.FullAdder as FA8 with function in0 = in0_9, function in1 = in1_9, function in2 = carry_8, function sum = out0_9, function carry = carry_9, constant weight = weight_9
clone builtins.FullAdder as FA9 with function in0 = in0_10, function in1 = in1_10, function in2 = carry_9, function sum = out0_10, function carry = carry_10, constant weight = weight_10
clone builtins.FullAdder as FA10 with function in0 = in0_11, function in1 = in1_11, function in2 = carry_10, function sum = out0_11, function carry = carry_11, constant weight = weight_11
clone builtins.FullAdder as FA11 with function in0 = in0_12, function in1 = in1_12, function in2 = carry_11, function sum = out0_12, function carry = carry_12, constant weight = weight_12
clone builtins.FullAdder as FA12 with function in0 = in0_13, function in1 = in1_13, function in2 = carry_12, function sum = out0_13, function carry = carry_13, constant weight = weight_13
clone builtins.FullAdder as FA13 with function in0 = in0_14, function in1 = in1_14, function in2 = carry_13, function sum = out0_14, function carry = carry_14, constant weight = weight_14
clone builtins.FullAdder as FA14 with function in0 = in0_15, function in1 = in1_15, function in2 = carry_14, function sum = out0_15, function carry = carry, constant weight = weight_15

function in0_0_value (t: int) : int = if in0_0[t] then pow2 weight_0 else 0
function in0_1_value (t: int) : int = if in0_1[t] then pow2 weight_1 else 0
function in0_2_value (t: int) : int = if in0_2[t] then pow2 weight_2 else 0
function in0_3_value (t: int) : int = if in0_3[t] then pow2 weight_3 else 0
function in0_4_value (t: int) : int = if in0_4[t] then pow2 weight_4 else 0
function in0_5_value (t: int) : int = if in0_5[t] then pow2 weight_5 else 0
function in0_6_value (t: int) : int = if in0_6[t] then pow2 weight_6 else 0
function in0_7_value (t: int) : int = if in0_7[t] then pow2 weight_7 else 0
function in0_8_value (t: int) : int = if in0_8[t] then pow2 weight_8 else 0
function in0_9_value (t: int) : int = if in0_9[t] then pow2 weight_9 else 0
function in0_10_value (t: int) : int = if in0_10[t] then pow2 weight_10 else 0
function in0_11_value (t: int) : int = if in0_11[t] then pow2 weight_11 else 0
function in0_12_value (t: int) : int = if in0_12[t] then pow2 weight_12 else 0
function in0_13_value (t: int) : int = if in0_13[t] then pow2 weight_13 else 0
function in0_14_value (t: int) : int = if in0_14[t] then pow2 weight_14 else 0
function in0_15_value (t: int) : int = if in0_15[t] then pow2 weight_15 else 0

function in1_0_value (t: int) : int = if in1_0[t] then pow2 weight_0 else 0
function in1_1_value (t: int) : int = if in1_1[t] then pow2 weight_1 else 0
function in1_2_value (t: int) : int = if in1_2[t] then pow2 weight_2 else 0
function in1_3_value (t: int) : int = if in1_3[t] then pow2 weight_3 else 0
function in1_4_value (t: int) : int = if in1_4[t] then pow2 weight_4 else 0
function in1_5_value (t: int) : int = if in1_5[t] then pow2 weight_5 else 0
function in1_6_value (t: int) : int = if in1_6[t] then pow2 weight_6 else 0
function in1_7_value (t: int) : int = if in1_7[t] then pow2 weight_7 else 0
function in1_8_value (t: int) : int = if in1_8[t] then pow2 weight_8 else 0
function in1_9_value (t: int) : int = if in1_9[t] then pow2 weight_9 else 0
function in1_10_value (t: int) : int = if in1_10[t] then pow2 weight_10 else 0
function in1_11_value (t: int) : int = if in1_11[t] then pow2 weight_11 else 0
function in1_12_value (t: int) : int = if in1_12[t] then pow2 weight_12 else 0
function in1_13_value (t: int) : int = if in1_13[t] then pow2 weight_13 else 0
function in1_14_value (t: int) : int = if in1_14[t] then pow2 weight_14 else 0
function in1_15_value (t: int) : int = if in1_15[t] then pow2 weight_15 else 0

function out0_0_value (t: int) : int = if out0_0[t] then pow2 weight_0 else 0
function out0_1_value (t: int) : int = if out0_1[t] then pow2 weight_1 else 0
function out0_2_value (t: int) : int = if out0_2[t] then pow2 weight_2 else 0
function out0_3_value (t: int) : int = if out0_3[t] then pow2 weight_3 else 0
function out0_4_value (t: int) : int = if out0_4[t] then pow2 weight_4 else 0
function out0_5_value (t: int) : int = if out0_5[t] then pow2 weight_5 else 0
function out0_6_value (t: int) : int = if out0_6[t] then pow2 weight_6 else 0
function out0_7_value (t: int) : int = if out0_7[t] then pow2 weight_7 else 0
function out0_8_value (t: int) : int = if out0_8[t] then pow2 weight_8 else 0
function out0_9_value (t: int) : int = if out0_9[t] then pow2 weight_9 else 0
function out0_10_value (t: int) : int = if out0_10[t] then pow2 weight_10 else 0
function out0_11_value (t: int) : int = if out0_11[t] then pow2 weight_11 else 0
function out0_12_value (t: int) : int = if out0_12[t] then pow2 weight_12 else 0
function out0_13_value (t: int) : int = if out0_13[t] then pow2 weight_13 else 0
function out0_14_value (t: int) : int = if out0_14[t] then pow2 weight_14 else 0
function out0_15_value (t: int) : int = if out0_15[t] then pow2 weight_15 else 0

function carry_0_value (t: int) : int = if carry_0[t] then pow2 weight_1 else 0
function carry_1_value (t: int) : int = if carry_1[t] then pow2 weight_2 else 0
function carry_2_value (t: int) : int = if carry_2[t] then pow2 weight_3 else 0
function carry_3_value (t: int) : int = if carry_3[t] then pow2 weight_4 else 0
function carry_4_value (t: int) : int = if carry_4[t] then pow2 weight_5 else 0
function carry_5_value (t: int) : int = if carry_5[t] then pow2 weight_6 else 0
function carry_6_value (t: int) : int = if carry_6[t] then pow2 weight_7 else 0
function carry_7_value (t: int) : int = if carry_7[t] then pow2 weight_8 else 0
function carry_8_value (t: int) : int = if carry_8[t] then pow2 weight_9 else 0
function carry_9_value (t: int) : int = if carry_9[t] then pow2 weight_10 else 0
function carry_10_value (t: int) : int = if carry_10[t] then pow2 weight_11 else 0
function carry_11_value (t: int) : int = if carry_11[t] then pow2 weight_12 else 0
function carry_12_value (t: int) : int = if carry_12[t] then pow2 weight_13 else 0
function carry_13_value (t: int) : int = if carry_13[t] then pow2 weight_14 else 0
function carry_14_value (t: int) : int = if carry_14[t] then pow2 weight_15 else 0
function carry_value (t: int) : int = if carry[t] then pow2 weight_16 else 0


(**)

function value (b: bool) (w: int): int = if b then pow2 weight else 0

lemma l: forall w: int. w >= 0 -> pow2 (w+1) = 2 * pow2 w

(*

several intermediate lemmas (last time I tried I did not need them ...)

*)

lemma sem1:  forall t: int.
      out0_0_value t +
      out0_1_value t +
      carry_1_value t =
      in0_0_value t +
      in0_1_value t +
      in1_0_value t +
      in1_1_value t

lemma sem5:
      forall t: int.
      out0_0_value t +
      out0_1_value t +
      out0_2_value t +
      out0_3_value t +
      out0_4_value t +
      out0_5_value t +
      carry_5_value t =
      in0_0_value t +
      in0_1_value t +
      in0_2_value t +
      in0_3_value t +
      in0_4_value t +
      in0_5_value t +
      in1_0_value t +
      in1_1_value t +
      in1_2_value t +
      in1_3_value t +
      in1_4_value t +
      in1_5_value t

lemma sem10:
      forall t: int.
      out0_0_value t +
      out0_1_value t +
      out0_2_value t +
      out0_3_value t +
      out0_4_value t +
      out0_5_value t +
      out0_6_value t +
      out0_7_value t +
      out0_8_value t +
      out0_9_value t +
      out0_10_value t +
      carry_10_value t =
      in0_0_value t +
      in0_1_value t +
      in0_2_value t +
      in0_3_value t +
      in0_4_value t +
      in0_5_value t +
      in0_6_value t +
      in0_7_value t +
      in0_8_value t +
      in0_9_value t +
      in0_10_value t +
      in1_0_value t +
      in1_1_value t +
      in1_2_value t +
      in1_3_value t +
      in1_4_value t +
      in1_5_value t +
      in1_6_value t +
      in1_7_value t +
      in1_8_value t +
      in1_9_value t +
      in1_10_value t


lemma sem:
      forall t: int.
      out0_0_value t +
      out0_1_value t +
      out0_2_value t +
      out0_3_value t +
      out0_4_value t +
      out0_5_value t +
      out0_6_value t +
      out0_7_value t +
      out0_8_value t +
      out0_9_value t +
      out0_10_value t +
      out0_11_value t +
      out0_12_value t +
      out0_13_value t +
      out0_14_value t +
      out0_15_value t +
      carry_value t =
      in0_0_value t +
      in0_1_value t +
      in0_2_value t +
      in0_3_value t +
      in0_4_value t +
      in0_5_value t +
      in0_6_value t +
      in0_7_value t +
      in0_8_value t +
      in0_9_value t +
      in0_10_value t +
      in0_11_value t +
      in0_12_value t +
      in0_13_value t +
      in0_14_value t +
      in0_15_value t +
      in1_0_value t +
      in1_1_value t +
      in1_2_value t +
      in1_3_value t +
      in1_4_value t +
      in1_5_value t +
      in1_6_value t +
      in1_7_value t +
      in1_8_value t +
      in1_9_value t +
      in1_10_value t +
      in1_11_value t +
      in1_12_value t +
      in1_13_value t +
      in1_14_value t +
      in1_15_value t


      
end
