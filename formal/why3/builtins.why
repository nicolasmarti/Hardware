(**************************)
(*

This is morally the common setup for gates/circuit specification
- implementation are given to prove lemmas
- one erase implementation and trasform lemmas into axioms for the builtins

for combinatorial circuit state are not needed

The goal of this boilerplate is to make proof of equivalence of semantics of ISA VS the gate-level implementation

*)

theory Gate

use import int.Int
type time = int

(**)

type input_t
type output_t

type state_t

(**)

function input time: input_t
function output time: output_t

function state time: state_t

(* output from state and input *)
function f state_t input_t: output_t

(* next state *)
function g state_t input_t: state_t

(**)

axiom out: forall t: time. output t = f (state (t - 1)) (input t)
axiom next: forall t: time. state t = g (state (t - 1)) (input (t - 1))

(**)

end


(**************************)

theory Wire

use import int.Int
use import bool.Bool

type t

function ([]) t int: bool

constant true_t: t
axiom ax_true_t: forall t: int. true_t[ t ] = true

end

theory WireVector

use import Wire
use import int.Int
use import bool.Bool

type t

function ([_..]) t int: Wire.t


end

(*************************)

theory NAND

use import Wire
use import WireVector
use import int.Int
use import bool.Bool

(**)

function in0: Wire.t
function in1: Wire.t
function out0: Wire.t

(**)

axiom nand_sem: forall t: int. out0[t] = notb (andb in0[t] in1[t])

end

(************************************************************************)
(* All these gates are added in an axiom form after having begin proved *)
(************************************************************************)


theory NOT

(**)

use import int.Int
use import bool.Bool

use import Wire
use import WireVector

use NAND

(**)

function in0: Wire.t
function out0: Wire.t

(**)

(**)

axiom sem: forall t: int.
	     out0[t] = notb in0[t]

end


(**********)


theory AND

(**)

use import int.Int
use import bool.Bool

use import Wire
use import WireVector

use NAND
use NOT

(**)

function in0: Wire.t
function in1: Wire.t

function out0: Wire.t

(**)
function aux: Wire.t

clone NAND as NAND1 with function in0 = in0, function in1 = in1, function out0 = aux


clone NOT as NOT1 with function in0 = aux, function out0 = out0

(**)

axiom sem: forall t: int. out0[t] = andb in0[t] in1[t]


end

(********)


theory OR

(**)

use import int.Int
use import bool.Bool

use import Wire
use import WireVector

use NAND
use NOT

(**)

function in0: Wire.t
function in1: Wire.t

function out0: Wire.t

(**)

axiom stable:
	forall t: int.
           out0[t] = orb in0[t] in1[t]

end


(********)


theory XOR

(**)

use import int.Int
use import bool.Bool

use import Wire
use import WireVector

use NAND
use OR
use AND

(**)

function in0: Wire.t
function in1: Wire.t

function out0: Wire.t

(**)

axiom sem:
	forall t: int.
	out0[t] = xorb in0[t] in1[t]

end

(*******)

theory MUX

(**)

use import int.Int
use import bool.Bool

use import Wire
use import WireVector

use NOT
use OR
use AND

(**)

function in0: Wire.t
function in1: Wire.t
function sel: Wire.t

function out0: Wire.t

(**)


(**)

axiom sem:
	forall t: int.
	out0[t] = if sel[t] then in1[t] else in0[t]

end

(************)

theory DMUX

(**)

use import int.Int
use import bool.Bool

use import Wire
use import WireVector

use NOT
use AND

(**)

function in0: Wire.t
function sel: Wire.t

function out0: Wire.t
function out1: Wire.t

(**)

(**)

axiom sem0:
	forall t: int.
	out0[t] = if sel[t] then false else in0[t]

axiom sem1:
	forall t: int.
	out1[t] = if sel[t] then in0[t] else false


end

(*********)

theory NOT16

(**)

use import int.Int
use import bool.Bool

use import Wire
use import WireVector

use NOT

(**)

function in0: WireVector.t

function out0: WireVector.t

(**)

(**)

axiom sem:
	forall t: int.
	forall n. 0 <= n < 16 ->
	out0[n ..][t] = notb in0[n ..][t]


end

(*********)

theory AND16

(**)

use import int.Int
use import bool.Bool

use import Wire
use import WireVector

use AND

(**)

function in0: WireVector.t
function in1: WireVector.t

function out0: WireVector.t

(**)


(**)

axiom sem:
	forall t: int.
	forall n. 0 <= n < 16 ->
	out0[n ..][t] = andb in0[n ..][t] in1[n ..][t]


end

(*******)

theory OR16

(**)

use import int.Int
use import bool.Bool

use import Wire
use import WireVector

use OR

(**)

function in0: WireVector.t
function in1: WireVector.t

function out0: WireVector.t

(**)


(**)

axiom sem:
	forall t: int.
	forall n. 0 <= n < 16 ->
	out0[n ..][t] = orb in0[n ..][t] in1[n ..][t]


end

(******)

theory MUX16

use import int.Int
use import bool.Bool

use import Wire
use import WireVector
use MUX

function in0: WireVector.t
function in1: WireVector.t
function sel: Wire.t
function out0: WireVector.t

axiom muxv_sem:
	forall t: int.
	forall n. 0 <= n < 16 ->
	out0[n ..][t] = if sel[t] then in1[n ..][t] else in0[n ..][t]

end

(********)

theory OR8WAY

use import int.Int
use import bool.Bool

use import Wire
use import WireVector
use OR

function in0: WireVector.t
function out0: Wire.t

axiom or8way_sem:
	forall t: int.
	out0[t] = orb in0[0 ..][t] 
		      (orb in0[1 ..][t] 
		      	   (orb in0[2 ..][t] 
		  	   	(orb in0[3 ..][t] 
		  		     (orb in0[4 ..][t] 
		  		     	  (orb in0[5 ..][t] 
		  			       (orb in0[6 ..][t] in0[7 ..][t]
					       )
					  )
				     )
				)
		           )
		      )
end

(**********)

theory MUX4WAY16

use import int.Int
use import bool.Bool

use import Wire
use import WireVector
use MUX16

function in0: WireVector.t
function in1: WireVector.t
function in2: WireVector.t
function in3: WireVector.t
function sel: WireVector.t
function out0: WireVector.t


axiom sem:
	forall t: int.
	forall n. 0 <= n < 16 -> 
          out0[n ..][t] =
	  if sel[0 ..][t] then (
	     if sel[1 ..][t] then (
	     	in3[n ..][t]
	     ) else (
	        in1[n ..][t]
	     )
	  ) else (
	     if sel[1 ..][t] then (
	        in2[n ..][t]
	     ) else (
	        in0[n ..][t]
	     )
	  )

end

(***********)

theory MUX8WAY16

use import int.Int
use import bool.Bool

use import Wire
use import WireVector
use MUX16

function in0: WireVector.t
function in1: WireVector.t
function in2: WireVector.t
function in3: WireVector.t
function in4: WireVector.t
function in5: WireVector.t
function in6: WireVector.t
function in7: WireVector.t
function sel: WireVector.t
function out0: WireVector.t


axiom sem:
	forall t: int.
	forall n. 0 <= n < 16 ->
	out0[n ..][t] =
	if sel[2 ..][t] then
	   if sel[1 ..][t] then
	      if sel[0 ..][t] then
	      	 in7[n ..][t]
	      else
	         in6[n ..][t]
	   else
	      if sel[0 ..][t] then
	      	 in5[n ..][t]
	      else
                 in4[n ..][t]
	else
	   if sel[1 ..][t] then
	      if sel[0 ..][t] then
                 in3[n ..][t]
	      else
	         in2[n ..][t]
	   else
	      if sel[0 ..][t] then
	      	 in1[n ..][t]
	      else
                 in0[n ..][t]

end

(********)

theory DMUX4WAY

use import int.Int
use import bool.Bool

use import Wire
use import WireVector
use DMUX

function in0: Wire.t
function sel: WireVector.t
function out0: Wire.t
function out1: Wire.t
function out2: Wire.t
function out3: Wire.t

(**)

(**)

axiom sem0:
	forall t: int.
	out0[t] = if not sel[0 ..][t] /\ not sel[1 ..][t] then
		     in0[t]
		     else false

axiom sem1:
	forall t: int.
	out1[t] = if not sel[0 ..][t] /\ sel[1 ..][t] then
		     in0[t]
		     else false

axiom sem2:
	forall t: int.
	out2[t] = if sel[0 ..][t] /\ not sel[1 ..][t] then
		     in0[t]
		     else false

axiom sem3:
	forall t: int.
	out3[t] = if sel[0 ..][t] /\ sel[1 ..][t] then
		     in0[t]
		     else false

end

(***********)

theory DMUX8WAY

use import int.Int
use import bool.Bool

use import Wire
use import WireVector
use DMUX

function in0: Wire.t
function sel: WireVector.t
function out0: Wire.t
function out1: Wire.t
function out2: Wire.t
function out3: Wire.t
function out4: Wire.t
function out5: Wire.t
function out6: Wire.t
function out7: Wire.t

(**)


(**)

axiom sem0:
	forall t: int.
	out0[t] = if not sel[0 ..][t] /\ not sel[1 ..][t] /\ not sel[2 ..][t] then
		     in0[t]
		     else false

axiom sem1:
	forall t: int.
	out1[t] = if sel[0 ..][t] /\ not sel[1 ..][t] /\ not sel[2 ..][t] then
		     in0[t]
		     else false

axiom sem2:
	forall t: int.
	out2[t] = if not sel[0 ..][t] /\ sel[1 ..][t] /\ not sel[2 ..][t] then
		     in0[t]
		     else false

axiom sem3:
	forall t: int.
	out3[t] = if sel[0 ..][t] /\ sel[1 ..][t] /\ not sel[2 ..][t] then
		     in0[t]
		     else false

axiom sem4:
	forall t: int.
	out4[t] = if not sel[0 ..][t] /\ not sel[1 ..][t] /\ sel[2 ..][t] then
		     in0[t]
		     else false


axiom sem5:
	forall t: int.
	out5[t] = if sel[0 ..][t] /\ not sel[1 ..][t] /\ sel[2 ..][t] then
		     in0[t]
		     else false

axiom sem6:
	forall t: int.
	out6[t] = if not sel[0 ..][t] /\ sel[1 ..][t] /\ sel[2 ..][t] then
		     in0[t]
		     else false

axiom sem7:
	forall t: int.
	out7[t] = if sel[0 ..][t] /\ sel[1 ..][t] /\ sel[2 ..][t] then
		     in0[t]
		     else false

end

(***********)


theory HalfAdder

(**)

use import int.Int
use import bool.Bool
use import bv.Pow2int

use import Wire
use import WireVector

use XOR
use AND

(**)

function in0: Wire.t
function in1: Wire.t

function sum: Wire.t
function carry: Wire.t


(**)

(**)

constant weight: int
axiom weight_pos: weight >= 0

function in0_value (t: int) : int = if in0[t] then pow2 weight else 0
function in1_value (t: int) : int = if in1[t] then pow2 weight else 0

function sum_value (t: int) : int = if sum[t] then pow2 weight else 0
function carry_value (t: int) : int = if carry[t] then pow2 (weight+1) else 0

axiom sem:
	forall t: int.
	sum_value t + carry_value t = in0_value t + in1_value t

end

(********)


theory FullAdder

(**)

use import int.Int
use import bool.Bool
use import bv.Pow2int

use import Wire
use import WireVector

use XOR
use AND
use OR

(**)

function in0: Wire.t
function in1: Wire.t
function in2: Wire.t

function sum: Wire.t
function carry: Wire.t


(**)

(**)

constant weight: int
axiom weight_pos: weight >= 0

function in0_value (t: int) : int = if in0[t] then pow2 weight else 0
function in1_value (t: int) : int = if in1[t] then pow2 weight else 0
function in2_value (t: int) : int = if in2[t] then pow2 weight else 0

function sum_value (t: int) : int = if sum[t] then pow2 weight else 0
function carry_value (t: int) : int = if carry[t] then pow2 (weight+1) else 0

axiom sem:
	forall t: int.
	sum_value t + carry_value t = in0_value t + in1_value t + in2_value t

end

(********)


theory ADD16

(**)

use import int.Int
use import bool.Bool
use import bv.Pow2int

use import Wire
use import WireVector

use import HalfAdder
use import FullAdder

(**)

function in0: WireVector.t
function in1: WireVector.t

function out0: WireVector.t
function carry: Wire.t

(**)

function in0_0: Wire.t = in0[0 ..]
function in0_1: Wire.t = in0[1 ..]
function in0_2: Wire.t = in0[2 ..]
function in0_3: Wire.t = in0[3 ..]
function in0_4: Wire.t = in0[4 ..]
function in0_5: Wire.t = in0[5 ..]
function in0_6: Wire.t = in0[6 ..]
function in0_7: Wire.t = in0[7 ..]
function in0_8: Wire.t = in0[8 ..]
function in0_9: Wire.t = in0[9 ..]
function in0_10: Wire.t = in0[10 ..]
function in0_11: Wire.t = in0[11 ..]
function in0_12: Wire.t = in0[12 ..]
function in0_13: Wire.t = in0[13 ..]
function in0_14: Wire.t = in0[14 ..]
function in0_15: Wire.t = in0[15 ..]

function in1_0: Wire.t = in1[0 ..]
function in1_1: Wire.t = in1[1 ..]
function in1_2: Wire.t = in1[2 ..]
function in1_3: Wire.t = in1[3 ..]
function in1_4: Wire.t = in1[4 ..]
function in1_5: Wire.t = in1[5 ..]
function in1_6: Wire.t = in1[6 ..]
function in1_7: Wire.t = in1[7 ..]
function in1_8: Wire.t = in1[8 ..]
function in1_9: Wire.t = in1[9 ..]
function in1_10: Wire.t = in1[10 ..]
function in1_11: Wire.t = in1[11 ..]
function in1_12: Wire.t = in1[12 ..]
function in1_13: Wire.t = in1[13 ..]
function in1_14: Wire.t = in1[14 ..]
function in1_15: Wire.t = in1[15 ..]

function out0_0: Wire.t = out0[0 ..]
function out0_1: Wire.t = out0[1 ..]
function out0_2: Wire.t = out0[2 ..]
function out0_3: Wire.t = out0[3 ..]
function out0_4: Wire.t = out0[4 ..]
function out0_5: Wire.t = out0[5 ..]
function out0_6: Wire.t = out0[6 ..]
function out0_7: Wire.t = out0[7 ..]
function out0_8: Wire.t = out0[8 ..]
function out0_9: Wire.t = out0[9 ..]
function out0_10: Wire.t = out0[10 ..]
function out0_11: Wire.t = out0[11 ..]
function out0_12: Wire.t = out0[12 ..]
function out0_13: Wire.t = out0[13 ..]
function out0_14: Wire.t = out0[14 ..]
function out0_15: Wire.t = out0[15 ..]

(**)

constant weight_0: int = 0
constant weight_1: int = 1
constant weight_2: int = 2
constant weight_3: int = 3
constant weight_4: int = 4
constant weight_5: int = 5
constant weight_6: int = 6
constant weight_7: int = 7
constant weight_8: int = 8
constant weight_9: int = 9
constant weight_10: int = 10
constant weight_11: int = 11
constant weight_12: int = 12
constant weight_13: int = 13
constant weight_14: int = 14
constant weight_15: int = 15
constant weight_16: int = 16

function in0_0_value (t: int) : int = if in0_0[t] then pow2 weight_0 else 0
function in0_1_value (t: int) : int = if in0_1[t] then pow2 weight_1 else 0
function in0_2_value (t: int) : int = if in0_2[t] then pow2 weight_2 else 0
function in0_3_value (t: int) : int = if in0_3[t] then pow2 weight_3 else 0
function in0_4_value (t: int) : int = if in0_4[t] then pow2 weight_4 else 0
function in0_5_value (t: int) : int = if in0_5[t] then pow2 weight_5 else 0
function in0_6_value (t: int) : int = if in0_6[t] then pow2 weight_6 else 0
function in0_7_value (t: int) : int = if in0_7[t] then pow2 weight_7 else 0
function in0_8_value (t: int) : int = if in0_8[t] then pow2 weight_8 else 0
function in0_9_value (t: int) : int = if in0_9[t] then pow2 weight_9 else 0
function in0_10_value (t: int) : int = if in0_10[t] then pow2 weight_10 else 0
function in0_11_value (t: int) : int = if in0_11[t] then pow2 weight_11 else 0
function in0_12_value (t: int) : int = if in0_12[t] then pow2 weight_12 else 0
function in0_13_value (t: int) : int = if in0_13[t] then pow2 weight_13 else 0
function in0_14_value (t: int) : int = if in0_14[t] then pow2 weight_14 else 0
function in0_15_value (t: int) : int = if in0_15[t] then pow2 weight_15 else 0

function in1_0_value (t: int) : int = if in1_0[t] then pow2 weight_0 else 0
function in1_1_value (t: int) : int = if in1_1[t] then pow2 weight_1 else 0
function in1_2_value (t: int) : int = if in1_2[t] then pow2 weight_2 else 0
function in1_3_value (t: int) : int = if in1_3[t] then pow2 weight_3 else 0
function in1_4_value (t: int) : int = if in1_4[t] then pow2 weight_4 else 0
function in1_5_value (t: int) : int = if in1_5[t] then pow2 weight_5 else 0
function in1_6_value (t: int) : int = if in1_6[t] then pow2 weight_6 else 0
function in1_7_value (t: int) : int = if in1_7[t] then pow2 weight_7 else 0
function in1_8_value (t: int) : int = if in1_8[t] then pow2 weight_8 else 0
function in1_9_value (t: int) : int = if in1_9[t] then pow2 weight_9 else 0
function in1_10_value (t: int) : int = if in1_10[t] then pow2 weight_10 else 0
function in1_11_value (t: int) : int = if in1_11[t] then pow2 weight_11 else 0
function in1_12_value (t: int) : int = if in1_12[t] then pow2 weight_12 else 0
function in1_13_value (t: int) : int = if in1_13[t] then pow2 weight_13 else 0
function in1_14_value (t: int) : int = if in1_14[t] then pow2 weight_14 else 0
function in1_15_value (t: int) : int = if in1_15[t] then pow2 weight_15 else 0

function out0_0_value (t: int) : int = if out0_0[t] then pow2 weight_0 else 0
function out0_1_value (t: int) : int = if out0_1[t] then pow2 weight_1 else 0
function out0_2_value (t: int) : int = if out0_2[t] then pow2 weight_2 else 0
function out0_3_value (t: int) : int = if out0_3[t] then pow2 weight_3 else 0
function out0_4_value (t: int) : int = if out0_4[t] then pow2 weight_4 else 0
function out0_5_value (t: int) : int = if out0_5[t] then pow2 weight_5 else 0
function out0_6_value (t: int) : int = if out0_6[t] then pow2 weight_6 else 0
function out0_7_value (t: int) : int = if out0_7[t] then pow2 weight_7 else 0
function out0_8_value (t: int) : int = if out0_8[t] then pow2 weight_8 else 0
function out0_9_value (t: int) : int = if out0_9[t] then pow2 weight_9 else 0
function out0_10_value (t: int) : int = if out0_10[t] then pow2 weight_10 else 0
function out0_11_value (t: int) : int = if out0_11[t] then pow2 weight_11 else 0
function out0_12_value (t: int) : int = if out0_12[t] then pow2 weight_12 else 0
function out0_13_value (t: int) : int = if out0_13[t] then pow2 weight_13 else 0
function out0_14_value (t: int) : int = if out0_14[t] then pow2 weight_14 else 0
function out0_15_value (t: int) : int = if out0_15[t] then pow2 weight_15 else 0

function carry_value (t: int) : int = if carry[t] then pow2 weight_16 else 0

(**)

axiom sem:
      forall t: int.
      out0_0_value t +
      out0_1_value t +
      out0_2_value t +
      out0_3_value t +
      out0_4_value t +
      out0_5_value t +
      out0_6_value t +
      out0_7_value t +
      out0_8_value t +
      out0_9_value t +
      out0_10_value t +
      out0_11_value t +
      out0_12_value t +
      out0_13_value t +
      out0_14_value t +
      out0_15_value t +
      carry_value t =
      in0_0_value t +
      in0_1_value t +
      in0_2_value t +
      in0_3_value t +
      in0_4_value t +
      in0_5_value t +
      in0_6_value t +
      in0_7_value t +
      in0_8_value t +
      in0_9_value t +
      in0_10_value t +
      in0_11_value t +
      in0_12_value t +
      in0_13_value t +
      in0_14_value t +
      in0_15_value t +
      in1_0_value t +
      in1_1_value t +
      in1_2_value t +
      in1_3_value t +
      in1_4_value t +
      in1_5_value t +
      in1_6_value t +
      in1_7_value t +
      in1_8_value t +
      in1_9_value t +
      in1_10_value t +
      in1_11_value t +
      in1_12_value t +
      in1_13_value t +
      in1_14_value t +
      in1_15_value t


      
end

(*******)


theory Inc16

(**)

use import int.Int
use import bool.Bool
use import bv.Pow2int

use import Wire
use import WireVector

use import HalfAdder
use import FullAdder

(**)

function in0: WireVector.t

function out0: WireVector.t
function carry: Wire.t

(**)

function in0_0: Wire.t = in0[0 ..]
function in0_1: Wire.t = in0[1 ..]
function in0_2: Wire.t = in0[2 ..]
function in0_3: Wire.t = in0[3 ..]
function in0_4: Wire.t = in0[4 ..]
function in0_5: Wire.t = in0[5 ..]
function in0_6: Wire.t = in0[6 ..]
function in0_7: Wire.t = in0[7 ..]
function in0_8: Wire.t = in0[8 ..]
function in0_9: Wire.t = in0[9 ..]
function in0_10: Wire.t = in0[10 ..]
function in0_11: Wire.t = in0[11 ..]
function in0_12: Wire.t = in0[12 ..]
function in0_13: Wire.t = in0[13 ..]
function in0_14: Wire.t = in0[14 ..]
function in0_15: Wire.t = in0[15 ..]

function out0_0: Wire.t = out0[0 ..]
function out0_1: Wire.t = out0[1 ..]
function out0_2: Wire.t = out0[2 ..]
function out0_3: Wire.t = out0[3 ..]
function out0_4: Wire.t = out0[4 ..]
function out0_5: Wire.t = out0[5 ..]
function out0_6: Wire.t = out0[6 ..]
function out0_7: Wire.t = out0[7 ..]
function out0_8: Wire.t = out0[8 ..]
function out0_9: Wire.t = out0[9 ..]
function out0_10: Wire.t = out0[10 ..]
function out0_11: Wire.t = out0[11 ..]
function out0_12: Wire.t = out0[12 ..]
function out0_13: Wire.t = out0[13 ..]
function out0_14: Wire.t = out0[14 ..]
function out0_15: Wire.t = out0[15 ..]

(**)

function carry_0: Wire.t
function carry_1: Wire.t
function carry_2: Wire.t
function carry_3: Wire.t
function carry_4: Wire.t
function carry_5: Wire.t
function carry_6: Wire.t
function carry_7: Wire.t
function carry_8: Wire.t
function carry_9: Wire.t
function carry_10: Wire.t
function carry_11: Wire.t
function carry_12: Wire.t
function carry_13: Wire.t
function carry_14: Wire.t

constant weight_0: int = 0
constant weight_1: int = 1
constant weight_2: int = 2
constant weight_3: int = 3
constant weight_4: int = 4
constant weight_5: int = 5
constant weight_6: int = 6
constant weight_7: int = 7
constant weight_8: int = 8
constant weight_9: int = 9
constant weight_10: int = 10
constant weight_11: int = 11
constant weight_12: int = 12
constant weight_13: int = 13
constant weight_14: int = 14
constant weight_15: int = 15
constant weight_16: int = 16

function in0_0_value (t: int) : int = if in0_0[t] then pow2 weight_0 else 0
function in0_1_value (t: int) : int = if in0_1[t] then pow2 weight_1 else 0
function in0_2_value (t: int) : int = if in0_2[t] then pow2 weight_2 else 0
function in0_3_value (t: int) : int = if in0_3[t] then pow2 weight_3 else 0
function in0_4_value (t: int) : int = if in0_4[t] then pow2 weight_4 else 0
function in0_5_value (t: int) : int = if in0_5[t] then pow2 weight_5 else 0
function in0_6_value (t: int) : int = if in0_6[t] then pow2 weight_6 else 0
function in0_7_value (t: int) : int = if in0_7[t] then pow2 weight_7 else 0
function in0_8_value (t: int) : int = if in0_8[t] then pow2 weight_8 else 0
function in0_9_value (t: int) : int = if in0_9[t] then pow2 weight_9 else 0
function in0_10_value (t: int) : int = if in0_10[t] then pow2 weight_10 else 0
function in0_11_value (t: int) : int = if in0_11[t] then pow2 weight_11 else 0
function in0_12_value (t: int) : int = if in0_12[t] then pow2 weight_12 else 0
function in0_13_value (t: int) : int = if in0_13[t] then pow2 weight_13 else 0
function in0_14_value (t: int) : int = if in0_14[t] then pow2 weight_14 else 0
function in0_15_value (t: int) : int = if in0_15[t] then pow2 weight_15 else 0

function out0_0_value (t: int) : int = if out0_0[t] then pow2 weight_0 else 0
function out0_1_value (t: int) : int = if out0_1[t] then pow2 weight_1 else 0
function out0_2_value (t: int) : int = if out0_2[t] then pow2 weight_2 else 0
function out0_3_value (t: int) : int = if out0_3[t] then pow2 weight_3 else 0
function out0_4_value (t: int) : int = if out0_4[t] then pow2 weight_4 else 0
function out0_5_value (t: int) : int = if out0_5[t] then pow2 weight_5 else 0
function out0_6_value (t: int) : int = if out0_6[t] then pow2 weight_6 else 0
function out0_7_value (t: int) : int = if out0_7[t] then pow2 weight_7 else 0
function out0_8_value (t: int) : int = if out0_8[t] then pow2 weight_8 else 0
function out0_9_value (t: int) : int = if out0_9[t] then pow2 weight_9 else 0
function out0_10_value (t: int) : int = if out0_10[t] then pow2 weight_10 else 0
function out0_11_value (t: int) : int = if out0_11[t] then pow2 weight_11 else 0
function out0_12_value (t: int) : int = if out0_12[t] then pow2 weight_12 else 0
function out0_13_value (t: int) : int = if out0_13[t] then pow2 weight_13 else 0
function out0_14_value (t: int) : int = if out0_14[t] then pow2 weight_14 else 0
function out0_15_value (t: int) : int = if out0_15[t] then pow2 weight_15 else 0

function carry_value (t: int) : int = if carry[t] then pow2 weight_16 else 0


(**)


axiom sem:
      forall t: int.
      out0_0_value t +
      out0_1_value t +
      out0_2_value t +
      out0_3_value t +
      out0_4_value t +
      out0_5_value t +
      out0_6_value t +
      out0_7_value t +
      out0_8_value t +
      out0_9_value t +
      out0_10_value t +
      out0_11_value t +
      out0_12_value t +
      out0_13_value t +
      out0_14_value t +
      out0_15_value t +
      carry_value t =
      in0_0_value t +
      in0_1_value t +
      in0_2_value t +
      in0_3_value t +
      in0_4_value t +
      in0_5_value t +
      in0_6_value t +
      in0_7_value t +
      in0_8_value t +
      in0_9_value t +
      in0_10_value t +
      in0_11_value t +
      in0_12_value t +
      in0_13_value t +
      in0_14_value t +
      in0_15_value t +
      1

      
end
